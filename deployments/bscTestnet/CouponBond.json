{
  "address": "0x8945C570122e36D919A2eAb0Bcc63478E9Cd4f94",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "AlreadyRepaid",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "EarlyClaim",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EarlyWithdraw",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFinalValue",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "NotRepaid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroBalanceClaim",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "ZeroBalanceWithdraw",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_initialSupply",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_interestPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_overdueInterestPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        },
        {
          "internalType": "uint64",
          "name": "_startTs",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_endTs",
          "type": "uint64"
        }
      ],
      "name": "addProduct",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getUnitDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getUnpaidDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "isRepaid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastUpdatedTs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numProducts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "products",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "overdueInterestPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "tokenBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "startTs",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "endTs",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "repaidTs",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "unclaimedInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xed5a346b48cb35c629c7ac3845cb5669f6601a1807569b34200bdfcdc50970d3",
  "receipt": {
    "to": null,
    "from": "0x4B994361257d060cF20dab2F13286B16B0019FdE",
    "contractAddress": "0x8945C570122e36D919A2eAb0Bcc63478E9Cd4f94",
    "transactionIndex": 0,
    "gasUsed": "4811863",
    "logsBloom": "0x
    "blockHash": "0xf92cf442cb7c799057eeaede59b025e3315124c6fede1328a0b29490c6fe43fa",
    "transactionHash": "0xed5a346b48cb35c629c7ac3845cb5669f6601a1807569b34200bdfcdc50970d3",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 23206927,
        "transactionHash": "0xed5a346b48cb35c629c7ac3845cb5669f6601a1807569b34200bdfcdc50970d3",
        "address": "0x8945C570122e36D919A2eAb0Bcc63478E9Cd4f94",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004b994361257d060cf20dab2f13286b16b0019fde"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xf92cf442cb7c799057eeaede59b025e3315124c6fede1328a0b29490c6fe43fa"
      }
    ],
    "blockNumber": 23206927,
    "cumulativeGasUsed": "4811863",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e065c26b51d346bbca49c5c17920dce1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"AlreadyRepaid\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"EarlyClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EarlyWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFinalValue\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"NotRepaid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroBalanceClaim\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"ZeroBalanceWithdraw\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interestPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_overdueInterestPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"_startTs\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_endTs\",\"type\":\"uint64\"}],\"name\":\"addProduct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getUnitDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getUnpaidDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isRepaid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastUpdatedTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numProducts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"products\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overdueInterestPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"startTs\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTs\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"repaidTs\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unclaimedInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"exists(uint256)\":{\"details\":\"Indicates whether any token exist with a given id, or not.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"repay(uint256,uint256)\":{\"details\":\"It is not able to repay after fully repaying the loan. The caller need to approve the repaying token. There are 3 cases. 1. block.timestamp < startTimestamp: repay only the principal. 2. startTs <= block.timestamp <= endTs: repay principal + interest 3. endTs < block.timestamp: repay principal + interest + overdue interest\",\"params\":{\"_amount\":\"amount of token to repay. type(uint256).max means to repay all.\",\"_id\":\"token id\"}},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalSupply(uint256)\":{\"details\":\"Total amount of tokens in with a given id.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claim(address,uint256)\":{\"notice\":\"Nft holders claim their interest. NOTE: Users with zero balance are also able to claim.\"},\"getUnitDebt(uint256)\":{\"notice\":\"The debt does not increase after repaid.\"}},\"notice\":\"This repays the interest monthly. At the maturity date, lenders receive the principal and one-month interest.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CouponBond.sol\":\"CouponBond\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x447a21c87433c0f11252912313a96f3454629ef88cca7a4eefbb283b3ec409f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/extensions/ERC1155Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155Burnable is ERC1155 {\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 value\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n\\n        _burnBatch(account, ids, values);\\n    }\\n}\\n\",\"keccak256\":\"0xb11d1ade7146ac3da122e1f387ea82b0bd385d50823946c3f967dbffef3e9f4f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/ERC1155Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\nimport \\\"../../../security/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC1155 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155Pausable is ERC1155, Pausable {\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        require(!paused(), \\\"ERC1155Pausable: token transfer while paused\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xdad22b949de979bb2ad9001c044b2aeaacf8a25e3de09ed6f022a9469f936d5b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155Supply.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155Supply is ERC1155 {\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return ERC1155Supply.totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] += amounts[i];\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 id = ids[i];\\n                uint256 amount = amounts[i];\\n                uint256 supply = _totalSupply[id];\\n                require(supply >= amount, \\\"ERC1155: burn amount exceeds totalSupply\\\");\\n                unchecked {\\n                    _totalSupply[id] = supply - amount;\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe3deb5f3b0c9d12944f62ab680f041bbf1910d9d3ac6b545b4b8e399643c538d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/CouponBond.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @notice This repays the interest monthly. At the maturity date, lenders receive the principal and one-month interest.\\ncontract CouponBond is\\n    ERC1155Supply,\\n    ERC1155Burnable,\\n    ERC1155Pausable,\\n    Ownable\\n{\\n    using SafeERC20 for IERC20;\\n\\n    error ZeroBalanceClaim();\\n    error EarlyClaim(address _from, uint256 _id);\\n    error ZeroBalanceWithdraw(uint256 _id);\\n    error EarlyWithdraw();\\n    error InvalidFinalValue();\\n    error NotRepaid(uint256 _id);\\n    error AlreadyRepaid(uint256 _id);\\n\\n    /// @param value                    value per token in WAD, e.g. $100\\n    /// @param interestPerSecond            interest rate per token in second. WAD. e.g. 15%\\n    /// @param overdueInterestPerSecond additional interest rate per token when overdue. WAD. e.g. 3% -> total 18% when overdue\\n    /// @param repaidBalance            total amount of token repaid. decimal is the same with `token`.\\n    struct Product {\\n        address token;\\n        uint256 value;\\n        uint256 interestPerSecond; // FIXME:\\n        uint256 overdueInterestPerSecond;\\n        string uri;\\n        uint256 tokenBalance;\\n        uint64 startTs;\\n        uint64 endTs;\\n        uint64 repaidTs;\\n    }\\n    mapping(uint256 => Product) public products;\\n    uint256 public numProducts;\\n\\n    mapping(uint256 => mapping(address => uint256)) public lastUpdatedTs;\\n    mapping(uint256 => mapping(address => uint256)) public unclaimedInterest;\\n\\n    constructor() ERC1155(\\\"\\\") Pausable() {}\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function addProduct(\\n        uint256 _initialSupply,\\n        address _token,\\n        uint256 _value,\\n        uint256 _interestPerSecond,\\n        uint256 _overdueInterestPerSecond,\\n        string memory _uri,\\n        uint64 _startTs,\\n        uint64 _endTs\\n    ) external onlyOwner {\\n        Product memory newProduct = Product({\\n            token: _token,\\n            value: _value,\\n            interestPerSecond: _interestPerSecond,\\n            overdueInterestPerSecond: _overdueInterestPerSecond,\\n            uri: _uri,\\n            tokenBalance: 0,\\n            startTs: _startTs,\\n            endTs: _endTs,\\n            repaidTs: 0\\n        });\\n        products[numProducts] = newProduct;\\n\\n        _mint(owner(), numProducts, _initialSupply, \\\"\\\");\\n        numProducts++;\\n    }\\n\\n    function uri(uint256 _id) public view override returns (string memory) {\\n        return products[_id].uri;\\n    }\\n\\n    function setURI(uint256 _id, string memory _uri) external onlyOwner {\\n        products[_id].uri = _uri;\\n    }\\n\\n    function isRepaid(uint256 _id) public view returns (bool) {\\n        return products[_id].repaidTs != 0;\\n    }\\n\\n    /// @dev It is not able to repay after fully repaying the loan.\\n    /// The caller need to approve the repaying token.\\n    /// There are 3 cases.\\n    /// 1. block.timestamp < startTimestamp: repay only the principal.\\n    /// 2. startTs <= block.timestamp <= endTs: repay principal + interest\\n    /// 3. endTs < block.timestamp: repay principal + interest + overdue interest\\n    /// @param _id token id\\n    /// @param _amount amount of token to repay. type(uint256).max means to repay all.\\n    function repay(uint256 _id, uint256 _amount) external {\\n        Product storage product = products[_id];\\n        uint256 repayingAmount = _amount;\\n\\n        if (isRepaid(_id)) revert AlreadyRepaid(_id);\\n\\n        uint256 unpaidDebt = getUnpaidDebt(_id);\\n        if (_amount == type(uint256).max) {\\n            repayingAmount = unpaidDebt;\\n        }\\n\\n        product.tokenBalance += repayingAmount;\\n        if (unpaidDebt <= product.tokenBalance) {\\n            product.repaidTs = uint64(block.timestamp);\\n        }\\n\\n        IERC20(product.token).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            repayingAmount\\n        );\\n    }\\n\\n    /// @notice The debt does not increase after repaid.\\n    function getUnitDebt(uint256 _id) public view returns (uint256) {\\n        Product storage product = products[_id];\\n        uint256 ts = 0;\\n\\n        if (isRepaid(_id)) {\\n            ts = product.repaidTs;\\n        } else if (block.timestamp < product.startTs) {\\n            ts = product.startTs; // just set interest as 0\\n        } else {\\n            ts = block.timestamp;\\n        }\\n\\n        uint256 interest = product.interestPerSecond * (ts - product.startTs);\\n\\n        // Overdue\\n        if (product.endTs < ts) {\\n            interest += product.overdueInterestPerSecond * (ts - product.endTs);\\n        }\\n\\n        return (product.value + interest);\\n    }\\n\\n    function getUnpaidDebt(uint256 _id) public view returns (uint256) {\\n        Product storage product = products[_id];\\n        // NOTE: ERC-1155 totalSupply has no decimal.\\n        return totalSupply(_id) * getUnitDebt(_id) - product.tokenBalance;\\n    }\\n\\n    /// @notice Nft holders claim their interest.\\n    /// NOTE: Users with zero balance are also able to claim.\\n    function claim(address _to, uint256 _id) external whenNotPaused {\\n        Product storage product = products[_id];\\n        uint256 receiveAmount;\\n\\n        _updateInterest(_to, _id);\\n\\n        if (product.endTs <= block.timestamp && isRepaid(_id)) {\\n            uint256 balance = balanceOf(_to, _id);\\n\\n            // Both interest & principal\\n            receiveAmount =\\n                (product.value * balance) +\\n                unclaimedInterest[_id][_to];\\n\\n            _burn(_to, _id, 1);\\n        } else {\\n            // only interest\\n            receiveAmount = unclaimedInterest[_id][_to];\\n        }\\n\\n        unclaimedInterest[_id][_to] = 0;\\n        lastUpdatedTs[_id][_to] = block.timestamp;\\n\\n        product.tokenBalance -= receiveAmount;\\n        IERC20(product.token).safeTransfer(_to, receiveAmount);\\n    }\\n\\n    /*\\n    /// @notice Admin withdraws the money to repay later when users do not claim for a long time.\\n    /// @param _id token id\\n    /// @param _amount the amount of token to withdraw\\n    /// NOTE: Do not _burn to allow users claim later.\\n    function withdrawResidue(uint256 _id, uint256 _amount) external onlyOwner {\\n        Product storage product = products[_id];\\n        if (!isRepaid(_id)) revert NotRepaid(_id);\\n        if (block.timestamp < product.endTs + 8 weeks) revert EarlyWithdraw();\\n\\n        uint256 balance = totalSupply(_id);\\n        if (balance == 0) revert ZeroBalanceWithdraw(_id);\\n\\n        product.tokenBalance -= _amount;\\n        IERC20(product.token).safeTransfer(owner(), _amount);\\n    }\\n    */\\n\\n    function getInterest(address _to, uint256 _id)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        Product storage product = products[_id];\\n        if (product.startTs < 0) return 0;\\n        uint256 userLastUpdatedTs = lastUpdatedTs[_id][_to];\\n\\n        return\\n            unclaimedInterest[_id][_to] +\\n            _calculateInterest(\\n                product.interestPerSecond,\\n                product.overdueInterestPerSecond,\\n                userLastUpdatedTs,\\n                product.endTs,\\n                block.timestamp\\n            );\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override(ERC1155, ERC1155Supply, ERC1155Pausable) {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from != address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 id = ids[i];\\n                _updateInterest(from, id);\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 id = ids[i];\\n                _updateInterest(to, id);\\n            }\\n        }\\n    }\\n\\n    function _updateInterest(address _to, uint256 _id) internal {\\n        Product storage product = products[_id];\\n        if (block.timestamp <= product.startTs) return;\\n\\n        uint256 userLastUpdatedTs = lastUpdatedTs[_id][_to];\\n        if (userLastUpdatedTs == 0) {\\n            userLastUpdatedTs = product.startTs;\\n        }\\n\\n        unclaimedInterest[_id][_to] +=\\n            balanceOf(_to, _id) *\\n            _calculateInterest(\\n                product.interestPerSecond,\\n                product.overdueInterestPerSecond,\\n                userLastUpdatedTs,\\n                product.endTs,\\n                block.timestamp\\n            );\\n        lastUpdatedTs[_id][_to] = block.timestamp;\\n    }\\n\\n    function _calculateInterest(\\n        uint256 _interestPerSecond,\\n        uint256 _overdueInterestPerSecond,\\n        uint256 _lastUpdatedTs,\\n        uint256 _endTs,\\n        uint256 _currentTs\\n    ) internal pure returns (uint256) {\\n        uint256 timeDelta = _currentTs - _lastUpdatedTs;\\n        uint256 interest = _interestPerSecond * timeDelta;\\n        if (_endTs < _currentTs) {\\n            uint256 latest = _endTs > _lastUpdatedTs ? _endTs : _lastUpdatedTs;\\n            interest += _overdueInterestPerSecond * (_currentTs - latest);\\n        }\\n\\n        return interest;\\n    }\\n}\\n\",\"keccak256\":\"0xc137d619874eee03a6293976db4caba8e9f36896b93b20f9218bb97dc6a95d51\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040518060200160405280600081525062000033816200007560201b60201c565b506000600460006101000a81548160ff0219169083151502179055506200006f620000636200009160201b60201c565b6200009960201b60201c565b62000274565b80600290805190602001906200008d9291906200015f565b5050565b600033905090565b6000600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600460016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8280546200016d906200023e565b90600052602060002090601f016020900481019282620001915760008555620001dd565b82601f10620001ac57805160ff1916838001178555620001dd565b82800160010185558215620001dd579182015b82811115620001dc578251825591602001919060010190620001bf565b5b509050620001ec9190620001f0565b5090565b5b808211156200020b576000816000905550600101620001f1565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200025757607f821691505b602082108114156200026e576200026d6200020f565b5b50919050565b6155ca80620002846000396000f3fe608060405234801561001057600080fd5b50600436106101d95760003560e01c80638456cb5911610104578063bd85b039116100a2578063f242432a11610071578063f242432a14610592578063f2fde38b146105ae578063f5298aca146105ca578063fea1e1c2146105e6576101d9565b8063bd85b039146104e6578063d6cf57e614610516578063d8aed14514610546578063e985e9c514610562576101d9565b80638e1eb411116100de5780638e1eb41114610460578063a22cb46514610490578063aad3ec96146104ac578063ac964f21146104c8576101d9565b80638456cb591461041c578063862440e2146104265780638da5cb5b14610442576101d9565b80634f558e791161017c57806371cf76931161014b57806371cf76931461035457806375a397a114610384578063774bc5be146103b45780637acc0b20146103e4576101d9565b80634f558e79146102e05780635c975abb146103105780636b20c4541461032e578063715018a61461034a576101d9565b80630e89341c116101b85780630e89341c1461025a5780632eb2c2d61461028a5780633f4ba83a146102a65780634e1273f4146102b0576101d9565b8062fdd58e146101de57806301ffc9a71461020e57806304cefd831461023e575b600080fd5b6101f860048036038101906101f39190613835565b610616565b6040516102059190613884565b60405180910390f35b610228600480360381019061022391906138f7565b6106df565b604051610235919061393f565b60405180910390f35b61025860048036038101906102539190613ae0565b6107c1565b005b610274600480360381019061026f9190613bb2565b6109bd565b6040516102819190613c67565b60405180910390f35b6102a4600480360381019061029f9190613df2565b610a65565b005b6102ae610b06565b005b6102ca60048036038101906102c59190613f84565b610b18565b6040516102d791906140ba565b60405180910390f35b6102fa60048036038101906102f59190613bb2565b610c31565b604051610307919061393f565b60405180910390f35b610318610c45565b604051610325919061393f565b60405180910390f35b610348600480360381019061034391906140dc565b610c5c565b005b610352610cf9565b005b61036e60048036038101906103699190613bb2565b610d0d565b60405161037b9190613884565b60405180910390f35b61039e60048036038101906103999190614167565b610d58565b6040516103ab9190613884565b60405180910390f35b6103ce60048036038101906103c99190613bb2565b610d7d565b6040516103db9190613884565b60405180910390f35b6103fe60048036038101906103f99190613bb2565b610ef8565b604051610413999897969594939291906141c5565b60405180910390f35b61042461102a565b005b610440600480360381019061043b9190614259565b61103c565b005b61044a611073565b60405161045791906142b5565b60405180910390f35b61047a60048036038101906104759190613bb2565b61109d565b604051610487919061393f565b60405180910390f35b6104aa60048036038101906104a591906142fc565b6110de565b005b6104c660048036038101906104c19190613835565b6110f4565b005b6104d0611357565b6040516104dd9190613884565b60405180910390f35b61050060048036038101906104fb9190613bb2565b61135d565b60405161050d9190613884565b60405180910390f35b610530600480360381019061052b9190613835565b61137a565b60405161053d9190613884565b60405180910390f35b610560600480360381019061055b919061433c565b6114b9565b005b61057c6004803603810190610577919061437c565b611603565b604051610589919061393f565b60405180910390f35b6105ac60048036038101906105a791906143bc565b611697565b005b6105c860048036038101906105c39190614453565b611738565b005b6105e460048036038101906105df9190614480565b6117bc565b005b61060060048036038101906105fb9190614167565b611859565b60405161060d9190613884565b60405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610687576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067e90614545565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806107aa57507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806107ba57506107b98261187e565b5b9050919050565b6107c96118e8565b60006040518061012001604052808973ffffffffffffffffffffffffffffffffffffffff168152602001888152602001878152602001868152602001858152602001600081526020018467ffffffffffffffff1681526020018367ffffffffffffffff168152602001600067ffffffffffffffff1681525090508060056000600654815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201556060820151816003015560808201518160040190805190602001906108da9291906136ea565b5060a0820151816005015560c08201518160060160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060e08201518160060160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506101008201518160060160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555090505061099a610981611073565b6006548b60405180602001604052806000815250611966565b600660008154809291906109ad90614594565b9190505550505050505050505050565b60606005600083815260200190815260200160002060040180546109e09061460c565b80601f0160208091040260200160405190810160405280929190818152602001828054610a0c9061460c565b8015610a595780601f10610a2e57610100808354040283529160200191610a59565b820191906000526020600020905b815481529060010190602001808311610a3c57829003601f168201915b50505050509050919050565b610a6d611b17565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610ab35750610ab285610aad611b17565b611603565b5b610af2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae9906146b0565b60405180910390fd5b610aff8585858585611b1f565b5050505050565b610b0e6118e8565b610b16611e41565b565b60608151835114610b5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5590614742565b60405180910390fd5b6000835167ffffffffffffffff811115610b7b57610b7a613975565b5b604051908082528060200260200182016040528015610ba95781602001602082028036833780820191505090505b50905060005b8451811015610c2657610bf6858281518110610bce57610bcd614762565b5b6020026020010151858381518110610be957610be8614762565b5b6020026020010151610616565b828281518110610c0957610c08614762565b5b60200260200101818152505080610c1f90614594565b9050610baf565b508091505092915050565b600080610c3d8361135d565b119050919050565b6000600460009054906101000a900460ff16905090565b610c64611b17565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480610caa5750610ca983610ca4611b17565b611603565b5b610ce9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce0906146b0565b60405180910390fd5b610cf4838383611ea4565b505050565b610d016118e8565b610d0b6000612173565b565b6000806005600084815260200190815260200160002090508060050154610d3384610d7d565b610d3c8561135d565b610d469190614791565b610d5091906147eb565b915050919050565b6007602052816000526040600020602052806000526040600020600091509150505481565b6000806005600084815260200190815260200160002090506000610da08461109d565b15610dcf578160060160109054906101000a900467ffffffffffffffff1667ffffffffffffffff169050610e28565b8160060160009054906101000a900467ffffffffffffffff1667ffffffffffffffff16421015610e23578160060160009054906101000a900467ffffffffffffffff1667ffffffffffffffff169050610e27565b4290505b5b60008260060160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1682610e5891906147eb565b8360020154610e679190614791565b9050818360060160089054906101000a900467ffffffffffffffff1667ffffffffffffffff161015610ede578260060160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1682610ec191906147eb565b8360030154610ed09190614791565b81610edb919061481f565b90505b808360010154610eee919061481f565b9350505050919050565b60056020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001015490806002015490806003015490806004018054610f539061460c565b80601f0160208091040260200160405190810160405280929190818152602001828054610f7f9061460c565b8015610fcc5780601f10610fa157610100808354040283529160200191610fcc565b820191906000526020600020905b815481529060010190602001808311610faf57829003601f168201915b5050505050908060050154908060060160009054906101000a900467ffffffffffffffff16908060060160089054906101000a900467ffffffffffffffff16908060060160109054906101000a900467ffffffffffffffff16905089565b6110326118e8565b61103a612239565b565b6110446118e8565b8060056000848152602001908152602001600020600401908051906020019061106e9291906136ea565b505050565b6000600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000806005600084815260200190815260200160002060060160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1614159050919050565b6110f06110e9611b17565b838361229c565b5050565b6110fc612409565b6000600560008381526020019081526020016000209050600061111f8484612453565b428260060160089054906101000a900467ffffffffffffffff1667ffffffffffffffff161115801561115657506111558361109d565b5b156111e85760006111678585610616565b90506008600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548184600101546111ca9190614791565b6111d4919061481f565b91506111e28585600161262a565b5061123c565b6008600084815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b60006008600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550426007600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550808260050160008282546112fb91906147eb565b9250508190555061135184828460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166128719092919063ffffffff16565b50505050565b60065481565b600060036000838152602001908152602001600020549050919050565b60008060056000848152602001908152602001600020905060008160060160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1610156113c75760009150506114b3565b60006007600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905061145382600201548360030154838560060160089054906101000a900467ffffffffffffffff1667ffffffffffffffff16426128f7565b6008600086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546114ae919061481f565b925050505b92915050565b600060056000848152602001908152602001600020905060008290506114de8461109d565b1561152057836040517f266b64850000000000000000000000000000000000000000000000000000000081526004016115179190613884565b60405180910390fd5b600061152b85610d0d565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff841415611559578091505b8183600501600082825461156d919061481f565b92505081905550826005015481116115ab57428360060160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b6115fc3330848660000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612967909392919063ffffffff16565b5050505050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61169f611b17565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614806116e557506116e4856116df611b17565b611603565b5b611724576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161171b906146b0565b60405180910390fd5b61173185858585856129f0565b5050505050565b6117406118e8565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156117b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117a7906148e7565b60405180910390fd5b6117b981612173565b50565b6117c4611b17565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16148061180a575061180983611804611b17565b611603565b5b611849576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611840906146b0565b60405180910390fd5b61185483838361262a565b505050565b6008602052816000526040600020602052806000526040600020600091509150505481565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6118f0611b17565b73ffffffffffffffffffffffffffffffffffffffff1661190e611073565b73ffffffffffffffffffffffffffffffffffffffff1614611964576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195b90614953565b60405180910390fd5b565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156119d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119cd906149e5565b60405180910390fd5b60006119e0611b17565b905060006119ed85612c8c565b905060006119fa85612c8c565b9050611a0b83600089858589612d06565b8460008088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611a6a919061481f565b925050819055508673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628989604051611ae8929190614a05565b60405180910390a4611aff83600089858589612e16565b611b0e83600089898989612e1e565b50505050505050565b600033905090565b8151835114611b63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5a90614aa0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611bd3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bca90614b32565b60405180910390fd5b6000611bdd611b17565b9050611bed818787878787612d06565b60005b8451811015611d9e576000858281518110611c0e57611c0d614762565b5b602002602001015190506000858381518110611c2d57611c2c614762565b5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611cce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cc590614bc4565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611d83919061481f565b9250508190555050505080611d9790614594565b9050611bf0565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611e15929190614be4565b60405180910390a4611e2b818787878787612e16565b611e39818787878787613005565b505050505050565b611e496131ec565b6000600460006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611e8d611b17565b604051611e9a91906142b5565b60405180910390a1565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611f14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f0b90614c8d565b60405180910390fd5b8051825114611f58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f4f90614aa0565b60405180910390fd5b6000611f62611b17565b9050611f8281856000868660405180602001604052806000815250612d06565b60005b83518110156120cf576000848281518110611fa357611fa2614762565b5b602002602001015190506000848381518110611fc257611fc1614762565b5b60200260200101519050600080600084815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015612063576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161205a90614d1f565b60405180910390fd5b81810360008085815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050505080806120c790614594565b915050611f85565b50600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051612147929190614be4565b60405180910390a461216d81856000868660405180602001604052806000815250612e16565b50505050565b6000600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600460016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b612241612409565b6001600460006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612285611b17565b60405161229291906142b5565b60405180910390a1565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561230b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161230290614db1565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516123fc919061393f565b60405180910390a3505050565b612411610c45565b15612451576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161244890614e1d565b60405180910390fd5b565b60006005600083815260200190815260200160002090508060060160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1642116124995750612626565b60006007600084815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081141561251d578160060160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1690505b61255482600201548360030154838560060160089054906101000a900467ffffffffffffffff1667ffffffffffffffff16426128f7565b61255e8585610616565b6125689190614791565b6008600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546125c7919061481f565b92505081905550426007600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050505b5050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561269a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161269190614c8d565b60405180910390fd5b60006126a4611b17565b905060006126b184612c8c565b905060006126be84612c8c565b90506126de83876000858560405180602001604052806000815250612d06565b600080600087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905084811015612775576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161276c90614d1f565b60405180910390fd5b84810360008088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628989604051612842929190614a05565b60405180910390a461286884886000868660405180602001604052806000815250612e16565b50505050505050565b6128f28363a9059cbb60e01b8484604051602401612890929190614e3d565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613235565b505050565b600080848361290691906147eb565b9050600081886129169190614791565b90508385101561295957600086861161292f5786612931565b855b9050808561293f91906147eb565b8861294a9190614791565b82612955919061481f565b9150505b809250505095945050505050565b6129ea846323b872dd60e01b85858560405160240161298893929190614e66565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613235565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612a60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a5790614b32565b60405180910390fd5b6000612a6a611b17565b90506000612a7785612c8c565b90506000612a8485612c8c565b9050612a94838989858589612d06565b600080600088815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905085811015612b2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b2290614bc4565b60405180910390fd5b85810360008089815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508560008089815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612be0919061481f565b925050819055508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628a8a604051612c5d929190614a05565b60405180910390a4612c73848a8a86868a612e16565b612c81848a8a8a8a8a612e1e565b505050505050505050565b60606000600167ffffffffffffffff811115612cab57612caa613975565b5b604051908082528060200260200182016040528015612cd95781602001602082028036833780820191505090505b5090508281600081518110612cf157612cf0614762565b5b60200260200101818152505080915050919050565b612d148686868686866132fc565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614612d915760005b8351811015612d8f576000848281518110612d6957612d68614762565b5b60200260200101519050612d7d8782612453565b5080612d8890614594565b9050612d4b565b505b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614612e0e5760005b8351811015612e0c576000848281518110612de657612de5614762565b5b60200260200101519050612dfa8682612453565b5080612e0590614594565b9050612dc8565b505b505050505050565b505050505050565b612e3d8473ffffffffffffffffffffffffffffffffffffffff1661335a565b15612ffd578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401612e83959493929190614ef2565b602060405180830381600087803b158015612e9d57600080fd5b505af1925050508015612ece57506040513d601f19601f82011682018060405250810190612ecb9190614f61565b60015b612f7457612eda614f9b565b806308c379a01415612f375750612eef614fbd565b80612efa5750612f39565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f2e9190613c67565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f6b906150c5565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612ffb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ff290615157565b60405180910390fd5b505b505050505050565b6130248473ffffffffffffffffffffffffffffffffffffffff1661335a565b156131e4578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b815260040161306a959493929190615177565b602060405180830381600087803b15801561308457600080fd5b505af19250505080156130b557506040513d601f19601f820116820180604052508101906130b29190614f61565b60015b61315b576130c1614f9b565b806308c379a0141561311e57506130d6614fbd565b806130e15750613120565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131159190613c67565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613152906150c5565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146131e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131d990615157565b60405180910390fd5b505b505050505050565b6131f4610c45565b613233576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161322a9061522b565b60405180910390fd5b565b6000613297826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661337d9092919063ffffffff16565b90506000815111156132f757808060200190518101906132b79190615260565b6132f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132ed906152ff565b60405180910390fd5b5b505050565b61330a868686868686613395565b613312610c45565b15613352576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161334990615391565b60405180910390fd5b505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b606061338c8484600085613567565b90509392505050565b6133a386868686868661367b565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614156134555760005b8351811015613453578281815181106133f7576133f6614762565b5b60200260200101516003600086848151811061341657613415614762565b5b60200260200101518152602001908152602001600020600082825461343b919061481f565b925050819055508061344c90614594565b90506133db565b505b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561355f5760005b835181101561355d5760008482815181106134ab576134aa614762565b5b6020026020010151905060008483815181106134ca576134c9614762565b5b602002602001015190506000600360008481526020019081526020016000205490508181101561352f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161352690615423565b60405180910390fd5b81810360036000858152602001908152602001600020819055505050508061355690614594565b905061348d565b505b505050505050565b6060824710156135ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135a3906154b5565b60405180910390fd5b6135b58561335a565b6135f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135eb90615521565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161361d919061557d565b60006040518083038185875af1925050503d806000811461365a576040519150601f19603f3d011682016040523d82523d6000602084013e61365f565b606091505b509150915061366f828286613683565b92505050949350505050565b505050505050565b60608315613693578290506136e3565b6000835111156136a65782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016136da9190613c67565b60405180910390fd5b9392505050565b8280546136f69061460c565b90600052602060002090601f016020900481019282613718576000855561375f565b82601f1061373157805160ff191683800117855561375f565b8280016001018555821561375f579182015b8281111561375e578251825591602001919060010190613743565b5b50905061376c9190613770565b5090565b5b80821115613789576000816000905550600101613771565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006137cc826137a1565b9050919050565b6137dc816137c1565b81146137e757600080fd5b50565b6000813590506137f9816137d3565b92915050565b6000819050919050565b613812816137ff565b811461381d57600080fd5b50565b60008135905061382f81613809565b92915050565b6000806040838503121561384c5761384b613797565b5b600061385a858286016137ea565b925050602061386b85828601613820565b9150509250929050565b61387e816137ff565b82525050565b60006020820190506138996000830184613875565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6138d48161389f565b81146138df57600080fd5b50565b6000813590506138f1816138cb565b92915050565b60006020828403121561390d5761390c613797565b5b600061391b848285016138e2565b91505092915050565b60008115159050919050565b61393981613924565b82525050565b60006020820190506139546000830184613930565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6139ad82613964565b810181811067ffffffffffffffff821117156139cc576139cb613975565b5b80604052505050565b60006139df61378d565b90506139eb82826139a4565b919050565b600067ffffffffffffffff821115613a0b57613a0a613975565b5b613a1482613964565b9050602081019050919050565b82818337600083830152505050565b6000613a43613a3e846139f0565b6139d5565b905082815260208101848484011115613a5f57613a5e61395f565b5b613a6a848285613a21565b509392505050565b600082601f830112613a8757613a8661395a565b5b8135613a97848260208601613a30565b91505092915050565b600067ffffffffffffffff82169050919050565b613abd81613aa0565b8114613ac857600080fd5b50565b600081359050613ada81613ab4565b92915050565b600080600080600080600080610100898b031215613b0157613b00613797565b5b6000613b0f8b828c01613820565b9850506020613b208b828c016137ea565b9750506040613b318b828c01613820565b9650506060613b428b828c01613820565b9550506080613b538b828c01613820565b94505060a089013567ffffffffffffffff811115613b7457613b7361379c565b5b613b808b828c01613a72565b93505060c0613b918b828c01613acb565b92505060e0613ba28b828c01613acb565b9150509295985092959890939650565b600060208284031215613bc857613bc7613797565b5b6000613bd684828501613820565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613c19578082015181840152602081019050613bfe565b83811115613c28576000848401525b50505050565b6000613c3982613bdf565b613c438185613bea565b9350613c53818560208601613bfb565b613c5c81613964565b840191505092915050565b60006020820190508181036000830152613c818184613c2e565b905092915050565b600067ffffffffffffffff821115613ca457613ca3613975565b5b602082029050602081019050919050565b600080fd5b6000613ccd613cc884613c89565b6139d5565b90508083825260208201905060208402830185811115613cf057613cef613cb5565b5b835b81811015613d195780613d058882613820565b845260208401935050602081019050613cf2565b5050509392505050565b600082601f830112613d3857613d3761395a565b5b8135613d48848260208601613cba565b91505092915050565b600067ffffffffffffffff821115613d6c57613d6b613975565b5b613d7582613964565b9050602081019050919050565b6000613d95613d9084613d51565b6139d5565b905082815260208101848484011115613db157613db061395f565b5b613dbc848285613a21565b509392505050565b600082601f830112613dd957613dd861395a565b5b8135613de9848260208601613d82565b91505092915050565b600080600080600060a08688031215613e0e57613e0d613797565b5b6000613e1c888289016137ea565b9550506020613e2d888289016137ea565b945050604086013567ffffffffffffffff811115613e4e57613e4d61379c565b5b613e5a88828901613d23565b935050606086013567ffffffffffffffff811115613e7b57613e7a61379c565b5b613e8788828901613d23565b925050608086013567ffffffffffffffff811115613ea857613ea761379c565b5b613eb488828901613dc4565b9150509295509295909350565b600067ffffffffffffffff821115613edc57613edb613975565b5b602082029050602081019050919050565b6000613f00613efb84613ec1565b6139d5565b90508083825260208201905060208402830185811115613f2357613f22613cb5565b5b835b81811015613f4c5780613f3888826137ea565b845260208401935050602081019050613f25565b5050509392505050565b600082601f830112613f6b57613f6a61395a565b5b8135613f7b848260208601613eed565b91505092915050565b60008060408385031215613f9b57613f9a613797565b5b600083013567ffffffffffffffff811115613fb957613fb861379c565b5b613fc585828601613f56565b925050602083013567ffffffffffffffff811115613fe657613fe561379c565b5b613ff285828601613d23565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b614031816137ff565b82525050565b60006140438383614028565b60208301905092915050565b6000602082019050919050565b600061406782613ffc565b6140718185614007565b935061407c83614018565b8060005b838110156140ad5781516140948882614037565b975061409f8361404f565b925050600181019050614080565b5085935050505092915050565b600060208201905081810360008301526140d4818461405c565b905092915050565b6000806000606084860312156140f5576140f4613797565b5b6000614103868287016137ea565b935050602084013567ffffffffffffffff8111156141245761412361379c565b5b61413086828701613d23565b925050604084013567ffffffffffffffff8111156141515761415061379c565b5b61415d86828701613d23565b9150509250925092565b6000806040838503121561417e5761417d613797565b5b600061418c85828601613820565b925050602061419d858286016137ea565b9150509250929050565b6141b0816137c1565b82525050565b6141bf81613aa0565b82525050565b6000610120820190506141db600083018c6141a7565b6141e8602083018b613875565b6141f5604083018a613875565b6142026060830189613875565b81810360808301526142148188613c2e565b905061422360a0830187613875565b61423060c08301866141b6565b61423d60e08301856141b6565b61424b6101008301846141b6565b9a9950505050505050505050565b600080604083850312156142705761426f613797565b5b600061427e85828601613820565b925050602083013567ffffffffffffffff81111561429f5761429e61379c565b5b6142ab85828601613a72565b9150509250929050565b60006020820190506142ca60008301846141a7565b92915050565b6142d981613924565b81146142e457600080fd5b50565b6000813590506142f6816142d0565b92915050565b6000806040838503121561431357614312613797565b5b6000614321858286016137ea565b9250506020614332858286016142e7565b9150509250929050565b6000806040838503121561435357614352613797565b5b600061436185828601613820565b925050602061437285828601613820565b9150509250929050565b6000806040838503121561439357614392613797565b5b60006143a1858286016137ea565b92505060206143b2858286016137ea565b9150509250929050565b600080600080600060a086880312156143d8576143d7613797565b5b60006143e6888289016137ea565b95505060206143f7888289016137ea565b945050604061440888828901613820565b935050606061441988828901613820565b925050608086013567ffffffffffffffff81111561443a5761443961379c565b5b61444688828901613dc4565b9150509295509295909350565b60006020828403121561446957614468613797565b5b6000614477848285016137ea565b91505092915050565b60008060006060848603121561449957614498613797565b5b60006144a7868287016137ea565b93505060206144b886828701613820565b92505060406144c986828701613820565b9150509250925092565b7f455243313135353a2061646472657373207a65726f206973206e6f742061207660008201527f616c6964206f776e657200000000000000000000000000000000000000000000602082015250565b600061452f602a83613bea565b915061453a826144d3565b604082019050919050565b6000602082019050818103600083015261455e81614522565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061459f826137ff565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156145d2576145d1614565565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061462457607f821691505b60208210811415614638576146376145dd565b5b50919050565b7f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60008201527f6572206e6f7220617070726f7665640000000000000000000000000000000000602082015250565b600061469a602f83613bea565b91506146a58261463e565b604082019050919050565b600060208201905081810360008301526146c98161468d565b9050919050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b600061472c602983613bea565b9150614737826146d0565b604082019050919050565b6000602082019050818103600083015261475b8161471f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061479c826137ff565b91506147a7836137ff565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156147e0576147df614565565b5b828202905092915050565b60006147f6826137ff565b9150614801836137ff565b92508282101561481457614813614565565b5b828203905092915050565b600061482a826137ff565b9150614835836137ff565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561486a57614869614565565b5b828201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006148d1602683613bea565b91506148dc82614875565b604082019050919050565b60006020820190508181036000830152614900816148c4565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061493d602083613bea565b915061494882614907565b602082019050919050565b6000602082019050818103600083015261496c81614930565b9050919050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006149cf602183613bea565b91506149da82614973565b604082019050919050565b600060208201905081810360008301526149fe816149c2565b9050919050565b6000604082019050614a1a6000830185613875565b614a276020830184613875565b9392505050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b6000614a8a602883613bea565b9150614a9582614a2e565b604082019050919050565b60006020820190508181036000830152614ab981614a7d565b9050919050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000614b1c602583613bea565b9150614b2782614ac0565b604082019050919050565b60006020820190508181036000830152614b4b81614b0f565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b6000614bae602a83613bea565b9150614bb982614b52565b604082019050919050565b60006020820190508181036000830152614bdd81614ba1565b9050919050565b60006040820190508181036000830152614bfe818561405c565b90508181036020830152614c12818461405c565b90509392505050565b7f455243313135353a206275726e2066726f6d20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000614c77602383613bea565b9150614c8282614c1b565b604082019050919050565b60006020820190508181036000830152614ca681614c6a565b9050919050565b7f455243313135353a206275726e20616d6f756e7420657863656564732062616c60008201527f616e636500000000000000000000000000000000000000000000000000000000602082015250565b6000614d09602483613bea565b9150614d1482614cad565b604082019050919050565b60006020820190508181036000830152614d3881614cfc565b9050919050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b6000614d9b602983613bea565b9150614da682614d3f565b604082019050919050565b60006020820190508181036000830152614dca81614d8e565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b6000614e07601083613bea565b9150614e1282614dd1565b602082019050919050565b60006020820190508181036000830152614e3681614dfa565b9050919050565b6000604082019050614e5260008301856141a7565b614e5f6020830184613875565b9392505050565b6000606082019050614e7b60008301866141a7565b614e8860208301856141a7565b614e956040830184613875565b949350505050565b600081519050919050565b600082825260208201905092915050565b6000614ec482614e9d565b614ece8185614ea8565b9350614ede818560208601613bfb565b614ee781613964565b840191505092915050565b600060a082019050614f0760008301886141a7565b614f1460208301876141a7565b614f216040830186613875565b614f2e6060830185613875565b8181036080830152614f408184614eb9565b90509695505050505050565b600081519050614f5b816138cb565b92915050565b600060208284031215614f7757614f76613797565b5b6000614f8584828501614f4c565b91505092915050565b60008160e01c9050919050565b600060033d1115614fba5760046000803e614fb7600051614f8e565b90505b90565b600060443d1015614fcd57615050565b614fd561378d565b60043d036004823e80513d602482011167ffffffffffffffff82111715614ffd575050615050565b808201805167ffffffffffffffff81111561501b5750505050615050565b80602083010160043d038501811115615038575050505050615050565b615047826020018501866139a4565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b60006150af603483613bea565b91506150ba82615053565b604082019050919050565b600060208201905081810360008301526150de816150a2565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b6000615141602883613bea565b915061514c826150e5565b604082019050919050565b6000602082019050818103600083015261517081615134565b9050919050565b600060a08201905061518c60008301886141a7565b61519960208301876141a7565b81810360408301526151ab818661405c565b905081810360608301526151bf818561405c565b905081810360808301526151d38184614eb9565b90509695505050505050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b6000615215601483613bea565b9150615220826151df565b602082019050919050565b6000602082019050818103600083015261524481615208565b9050919050565b60008151905061525a816142d0565b92915050565b60006020828403121561527657615275613797565b5b60006152848482850161524b565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006152e9602a83613bea565b91506152f48261528d565b604082019050919050565b60006020820190508181036000830152615318816152dc565b9050919050565b7f455243313135355061757361626c653a20746f6b656e207472616e736665722060008201527f7768696c65207061757365640000000000000000000000000000000000000000602082015250565b600061537b602c83613bea565b91506153868261531f565b604082019050919050565b600060208201905081810360008301526153aa8161536e565b9050919050565b7f455243313135353a206275726e20616d6f756e74206578636565647320746f7460008201527f616c537570706c79000000000000000000000000000000000000000000000000602082015250565b600061540d602883613bea565b9150615418826153b1565b604082019050919050565b6000602082019050818103600083015261543c81615400565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b600061549f602683613bea565b91506154aa82615443565b604082019050919050565b600060208201905081810360008301526154ce81615492565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b600061550b601d83613bea565b9150615516826154d5565b602082019050919050565b6000602082019050818103600083015261553a816154fe565b9050919050565b600081905092915050565b600061555782614e9d565b6155618185615541565b9350615571818560208601613bfb565b80840191505092915050565b6000615589828461554c565b91508190509291505056fea2646970667358221220764eb1462793898e005120dd5fc29c2caabc3ed1dd8b3cf091ffdb91bcaab33364736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101d95760003560e01c80638456cb5911610104578063bd85b039116100a2578063f242432a11610071578063f242432a14610592578063f2fde38b146105ae578063f5298aca146105ca578063fea1e1c2146105e6576101d9565b8063bd85b039146104e6578063d6cf57e614610516578063d8aed14514610546578063e985e9c514610562576101d9565b80638e1eb411116100de5780638e1eb41114610460578063a22cb46514610490578063aad3ec96146104ac578063ac964f21146104c8576101d9565b80638456cb591461041c578063862440e2146104265780638da5cb5b14610442576101d9565b80634f558e791161017c57806371cf76931161014b57806371cf76931461035457806375a397a114610384578063774bc5be146103b45780637acc0b20146103e4576101d9565b80634f558e79146102e05780635c975abb146103105780636b20c4541461032e578063715018a61461034a576101d9565b80630e89341c116101b85780630e89341c1461025a5780632eb2c2d61461028a5780633f4ba83a146102a65780634e1273f4146102b0576101d9565b8062fdd58e146101de57806301ffc9a71461020e57806304cefd831461023e575b600080fd5b6101f860048036038101906101f39190613835565b610616565b6040516102059190613884565b60405180910390f35b610228600480360381019061022391906138f7565b6106df565b604051610235919061393f565b60405180910390f35b61025860048036038101906102539190613ae0565b6107c1565b005b610274600480360381019061026f9190613bb2565b6109bd565b6040516102819190613c67565b60405180910390f35b6102a4600480360381019061029f9190613df2565b610a65565b005b6102ae610b06565b005b6102ca60048036038101906102c59190613f84565b610b18565b6040516102d791906140ba565b60405180910390f35b6102fa60048036038101906102f59190613bb2565b610c31565b604051610307919061393f565b60405180910390f35b610318610c45565b604051610325919061393f565b60405180910390f35b610348600480360381019061034391906140dc565b610c5c565b005b610352610cf9565b005b61036e60048036038101906103699190613bb2565b610d0d565b60405161037b9190613884565b60405180910390f35b61039e60048036038101906103999190614167565b610d58565b6040516103ab9190613884565b60405180910390f35b6103ce60048036038101906103c99190613bb2565b610d7d565b6040516103db9190613884565b60405180910390f35b6103fe60048036038101906103f99190613bb2565b610ef8565b604051610413999897969594939291906141c5565b60405180910390f35b61042461102a565b005b610440600480360381019061043b9190614259565b61103c565b005b61044a611073565b60405161045791906142b5565b60405180910390f35b61047a60048036038101906104759190613bb2565b61109d565b604051610487919061393f565b60405180910390f35b6104aa60048036038101906104a591906142fc565b6110de565b005b6104c660048036038101906104c19190613835565b6110f4565b005b6104d0611357565b6040516104dd9190613884565b60405180910390f35b61050060048036038101906104fb9190613bb2565b61135d565b60405161050d9190613884565b60405180910390f35b610530600480360381019061052b9190613835565b61137a565b60405161053d9190613884565b60405180910390f35b610560600480360381019061055b919061433c565b6114b9565b005b61057c6004803603810190610577919061437c565b611603565b604051610589919061393f565b60405180910390f35b6105ac60048036038101906105a791906143bc565b611697565b005b6105c860048036038101906105c39190614453565b611738565b005b6105e460048036038101906105df9190614480565b6117bc565b005b61060060048036038101906105fb9190614167565b611859565b60405161060d9190613884565b60405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610687576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067e90614545565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806107aa57507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806107ba57506107b98261187e565b5b9050919050565b6107c96118e8565b60006040518061012001604052808973ffffffffffffffffffffffffffffffffffffffff168152602001888152602001878152602001868152602001858152602001600081526020018467ffffffffffffffff1681526020018367ffffffffffffffff168152602001600067ffffffffffffffff1681525090508060056000600654815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201556060820151816003015560808201518160040190805190602001906108da9291906136ea565b5060a0820151816005015560c08201518160060160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060e08201518160060160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506101008201518160060160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555090505061099a610981611073565b6006548b60405180602001604052806000815250611966565b600660008154809291906109ad90614594565b9190505550505050505050505050565b60606005600083815260200190815260200160002060040180546109e09061460c565b80601f0160208091040260200160405190810160405280929190818152602001828054610a0c9061460c565b8015610a595780601f10610a2e57610100808354040283529160200191610a59565b820191906000526020600020905b815481529060010190602001808311610a3c57829003601f168201915b50505050509050919050565b610a6d611b17565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610ab35750610ab285610aad611b17565b611603565b5b610af2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae9906146b0565b60405180910390fd5b610aff8585858585611b1f565b5050505050565b610b0e6118e8565b610b16611e41565b565b60608151835114610b5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5590614742565b60405180910390fd5b6000835167ffffffffffffffff811115610b7b57610b7a613975565b5b604051908082528060200260200182016040528015610ba95781602001602082028036833780820191505090505b50905060005b8451811015610c2657610bf6858281518110610bce57610bcd614762565b5b6020026020010151858381518110610be957610be8614762565b5b6020026020010151610616565b828281518110610c0957610c08614762565b5b60200260200101818152505080610c1f90614594565b9050610baf565b508091505092915050565b600080610c3d8361135d565b119050919050565b6000600460009054906101000a900460ff16905090565b610c64611b17565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480610caa5750610ca983610ca4611b17565b611603565b5b610ce9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce0906146b0565b60405180910390fd5b610cf4838383611ea4565b505050565b610d016118e8565b610d0b6000612173565b565b6000806005600084815260200190815260200160002090508060050154610d3384610d7d565b610d3c8561135d565b610d469190614791565b610d5091906147eb565b915050919050565b6007602052816000526040600020602052806000526040600020600091509150505481565b6000806005600084815260200190815260200160002090506000610da08461109d565b15610dcf578160060160109054906101000a900467ffffffffffffffff1667ffffffffffffffff169050610e28565b8160060160009054906101000a900467ffffffffffffffff1667ffffffffffffffff16421015610e23578160060160009054906101000a900467ffffffffffffffff1667ffffffffffffffff169050610e27565b4290505b5b60008260060160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1682610e5891906147eb565b8360020154610e679190614791565b9050818360060160089054906101000a900467ffffffffffffffff1667ffffffffffffffff161015610ede578260060160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1682610ec191906147eb565b8360030154610ed09190614791565b81610edb919061481f565b90505b808360010154610eee919061481f565b9350505050919050565b60056020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001015490806002015490806003015490806004018054610f539061460c565b80601f0160208091040260200160405190810160405280929190818152602001828054610f7f9061460c565b8015610fcc5780601f10610fa157610100808354040283529160200191610fcc565b820191906000526020600020905b815481529060010190602001808311610faf57829003601f168201915b5050505050908060050154908060060160009054906101000a900467ffffffffffffffff16908060060160089054906101000a900467ffffffffffffffff16908060060160109054906101000a900467ffffffffffffffff16905089565b6110326118e8565b61103a612239565b565b6110446118e8565b8060056000848152602001908152602001600020600401908051906020019061106e9291906136ea565b505050565b6000600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000806005600084815260200190815260200160002060060160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1614159050919050565b6110f06110e9611b17565b838361229c565b5050565b6110fc612409565b6000600560008381526020019081526020016000209050600061111f8484612453565b428260060160089054906101000a900467ffffffffffffffff1667ffffffffffffffff161115801561115657506111558361109d565b5b156111e85760006111678585610616565b90506008600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548184600101546111ca9190614791565b6111d4919061481f565b91506111e28585600161262a565b5061123c565b6008600084815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b60006008600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550426007600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550808260050160008282546112fb91906147eb565b9250508190555061135184828460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166128719092919063ffffffff16565b50505050565b60065481565b600060036000838152602001908152602001600020549050919050565b60008060056000848152602001908152602001600020905060008160060160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1610156113c75760009150506114b3565b60006007600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905061145382600201548360030154838560060160089054906101000a900467ffffffffffffffff1667ffffffffffffffff16426128f7565b6008600086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546114ae919061481f565b925050505b92915050565b600060056000848152602001908152602001600020905060008290506114de8461109d565b1561152057836040517f266b64850000000000000000000000000000000000000000000000000000000081526004016115179190613884565b60405180910390fd5b600061152b85610d0d565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff841415611559578091505b8183600501600082825461156d919061481f565b92505081905550826005015481116115ab57428360060160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b6115fc3330848660000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612967909392919063ffffffff16565b5050505050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61169f611b17565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614806116e557506116e4856116df611b17565b611603565b5b611724576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161171b906146b0565b60405180910390fd5b61173185858585856129f0565b5050505050565b6117406118e8565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156117b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117a7906148e7565b60405180910390fd5b6117b981612173565b50565b6117c4611b17565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16148061180a575061180983611804611b17565b611603565b5b611849576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611840906146b0565b60405180910390fd5b61185483838361262a565b505050565b6008602052816000526040600020602052806000526040600020600091509150505481565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6118f0611b17565b73ffffffffffffffffffffffffffffffffffffffff1661190e611073565b73ffffffffffffffffffffffffffffffffffffffff1614611964576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195b90614953565b60405180910390fd5b565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156119d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119cd906149e5565b60405180910390fd5b60006119e0611b17565b905060006119ed85612c8c565b905060006119fa85612c8c565b9050611a0b83600089858589612d06565b8460008088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611a6a919061481f565b925050819055508673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628989604051611ae8929190614a05565b60405180910390a4611aff83600089858589612e16565b611b0e83600089898989612e1e565b50505050505050565b600033905090565b8151835114611b63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5a90614aa0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611bd3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bca90614b32565b60405180910390fd5b6000611bdd611b17565b9050611bed818787878787612d06565b60005b8451811015611d9e576000858281518110611c0e57611c0d614762565b5b602002602001015190506000858381518110611c2d57611c2c614762565b5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611cce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cc590614bc4565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611d83919061481f565b9250508190555050505080611d9790614594565b9050611bf0565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611e15929190614be4565b60405180910390a4611e2b818787878787612e16565b611e39818787878787613005565b505050505050565b611e496131ec565b6000600460006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611e8d611b17565b604051611e9a91906142b5565b60405180910390a1565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611f14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f0b90614c8d565b60405180910390fd5b8051825114611f58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f4f90614aa0565b60405180910390fd5b6000611f62611b17565b9050611f8281856000868660405180602001604052806000815250612d06565b60005b83518110156120cf576000848281518110611fa357611fa2614762565b5b602002602001015190506000848381518110611fc257611fc1614762565b5b60200260200101519050600080600084815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015612063576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161205a90614d1f565b60405180910390fd5b81810360008085815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050505080806120c790614594565b915050611f85565b50600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051612147929190614be4565b60405180910390a461216d81856000868660405180602001604052806000815250612e16565b50505050565b6000600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600460016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b612241612409565b6001600460006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612285611b17565b60405161229291906142b5565b60405180910390a1565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561230b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161230290614db1565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516123fc919061393f565b60405180910390a3505050565b612411610c45565b15612451576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161244890614e1d565b60405180910390fd5b565b60006005600083815260200190815260200160002090508060060160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1642116124995750612626565b60006007600084815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081141561251d578160060160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1690505b61255482600201548360030154838560060160089054906101000a900467ffffffffffffffff1667ffffffffffffffff16426128f7565b61255e8585610616565b6125689190614791565b6008600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546125c7919061481f565b92505081905550426007600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050505b5050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561269a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161269190614c8d565b60405180910390fd5b60006126a4611b17565b905060006126b184612c8c565b905060006126be84612c8c565b90506126de83876000858560405180602001604052806000815250612d06565b600080600087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905084811015612775576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161276c90614d1f565b60405180910390fd5b84810360008088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628989604051612842929190614a05565b60405180910390a461286884886000868660405180602001604052806000815250612e16565b50505050505050565b6128f28363a9059cbb60e01b8484604051602401612890929190614e3d565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613235565b505050565b600080848361290691906147eb565b9050600081886129169190614791565b90508385101561295957600086861161292f5786612931565b855b9050808561293f91906147eb565b8861294a9190614791565b82612955919061481f565b9150505b809250505095945050505050565b6129ea846323b872dd60e01b85858560405160240161298893929190614e66565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613235565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612a60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a5790614b32565b60405180910390fd5b6000612a6a611b17565b90506000612a7785612c8c565b90506000612a8485612c8c565b9050612a94838989858589612d06565b600080600088815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905085811015612b2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b2290614bc4565b60405180910390fd5b85810360008089815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508560008089815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612be0919061481f565b925050819055508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628a8a604051612c5d929190614a05565b60405180910390a4612c73848a8a86868a612e16565b612c81848a8a8a8a8a612e1e565b505050505050505050565b60606000600167ffffffffffffffff811115612cab57612caa613975565b5b604051908082528060200260200182016040528015612cd95781602001602082028036833780820191505090505b5090508281600081518110612cf157612cf0614762565b5b60200260200101818152505080915050919050565b612d148686868686866132fc565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614612d915760005b8351811015612d8f576000848281518110612d6957612d68614762565b5b60200260200101519050612d7d8782612453565b5080612d8890614594565b9050612d4b565b505b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614612e0e5760005b8351811015612e0c576000848281518110612de657612de5614762565b5b60200260200101519050612dfa8682612453565b5080612e0590614594565b9050612dc8565b505b505050505050565b505050505050565b612e3d8473ffffffffffffffffffffffffffffffffffffffff1661335a565b15612ffd578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401612e83959493929190614ef2565b602060405180830381600087803b158015612e9d57600080fd5b505af1925050508015612ece57506040513d601f19601f82011682018060405250810190612ecb9190614f61565b60015b612f7457612eda614f9b565b806308c379a01415612f375750612eef614fbd565b80612efa5750612f39565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f2e9190613c67565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f6b906150c5565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612ffb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ff290615157565b60405180910390fd5b505b505050505050565b6130248473ffffffffffffffffffffffffffffffffffffffff1661335a565b156131e4578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b815260040161306a959493929190615177565b602060405180830381600087803b15801561308457600080fd5b505af19250505080156130b557506040513d601f19601f820116820180604052508101906130b29190614f61565b60015b61315b576130c1614f9b565b806308c379a0141561311e57506130d6614fbd565b806130e15750613120565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131159190613c67565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613152906150c5565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146131e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131d990615157565b60405180910390fd5b505b505050505050565b6131f4610c45565b613233576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161322a9061522b565b60405180910390fd5b565b6000613297826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661337d9092919063ffffffff16565b90506000815111156132f757808060200190518101906132b79190615260565b6132f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132ed906152ff565b60405180910390fd5b5b505050565b61330a868686868686613395565b613312610c45565b15613352576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161334990615391565b60405180910390fd5b505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b606061338c8484600085613567565b90509392505050565b6133a386868686868661367b565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614156134555760005b8351811015613453578281815181106133f7576133f6614762565b5b60200260200101516003600086848151811061341657613415614762565b5b60200260200101518152602001908152602001600020600082825461343b919061481f565b925050819055508061344c90614594565b90506133db565b505b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561355f5760005b835181101561355d5760008482815181106134ab576134aa614762565b5b6020026020010151905060008483815181106134ca576134c9614762565b5b602002602001015190506000600360008481526020019081526020016000205490508181101561352f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161352690615423565b60405180910390fd5b81810360036000858152602001908152602001600020819055505050508061355690614594565b905061348d565b505b505050505050565b6060824710156135ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135a3906154b5565b60405180910390fd5b6135b58561335a565b6135f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135eb90615521565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161361d919061557d565b60006040518083038185875af1925050503d806000811461365a576040519150601f19603f3d011682016040523d82523d6000602084013e61365f565b606091505b509150915061366f828286613683565b92505050949350505050565b505050505050565b60608315613693578290506136e3565b6000835111156136a65782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016136da9190613c67565b60405180910390fd5b9392505050565b8280546136f69061460c565b90600052602060002090601f016020900481019282613718576000855561375f565b82601f1061373157805160ff191683800117855561375f565b8280016001018555821561375f579182015b8281111561375e578251825591602001919060010190613743565b5b50905061376c9190613770565b5090565b5b80821115613789576000816000905550600101613771565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006137cc826137a1565b9050919050565b6137dc816137c1565b81146137e757600080fd5b50565b6000813590506137f9816137d3565b92915050565b6000819050919050565b613812816137ff565b811461381d57600080fd5b50565b60008135905061382f81613809565b92915050565b6000806040838503121561384c5761384b613797565b5b600061385a858286016137ea565b925050602061386b85828601613820565b9150509250929050565b61387e816137ff565b82525050565b60006020820190506138996000830184613875565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6138d48161389f565b81146138df57600080fd5b50565b6000813590506138f1816138cb565b92915050565b60006020828403121561390d5761390c613797565b5b600061391b848285016138e2565b91505092915050565b60008115159050919050565b61393981613924565b82525050565b60006020820190506139546000830184613930565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6139ad82613964565b810181811067ffffffffffffffff821117156139cc576139cb613975565b5b80604052505050565b60006139df61378d565b90506139eb82826139a4565b919050565b600067ffffffffffffffff821115613a0b57613a0a613975565b5b613a1482613964565b9050602081019050919050565b82818337600083830152505050565b6000613a43613a3e846139f0565b6139d5565b905082815260208101848484011115613a5f57613a5e61395f565b5b613a6a848285613a21565b509392505050565b600082601f830112613a8757613a8661395a565b5b8135613a97848260208601613a30565b91505092915050565b600067ffffffffffffffff82169050919050565b613abd81613aa0565b8114613ac857600080fd5b50565b600081359050613ada81613ab4565b92915050565b600080600080600080600080610100898b031215613b0157613b00613797565b5b6000613b0f8b828c01613820565b9850506020613b208b828c016137ea565b9750506040613b318b828c01613820565b9650506060613b428b828c01613820565b9550506080613b538b828c01613820565b94505060a089013567ffffffffffffffff811115613b7457613b7361379c565b5b613b808b828c01613a72565b93505060c0613b918b828c01613acb565b92505060e0613ba28b828c01613acb565b9150509295985092959890939650565b600060208284031215613bc857613bc7613797565b5b6000613bd684828501613820565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613c19578082015181840152602081019050613bfe565b83811115613c28576000848401525b50505050565b6000613c3982613bdf565b613c438185613bea565b9350613c53818560208601613bfb565b613c5c81613964565b840191505092915050565b60006020820190508181036000830152613c818184613c2e565b905092915050565b600067ffffffffffffffff821115613ca457613ca3613975565b5b602082029050602081019050919050565b600080fd5b6000613ccd613cc884613c89565b6139d5565b90508083825260208201905060208402830185811115613cf057613cef613cb5565b5b835b81811015613d195780613d058882613820565b845260208401935050602081019050613cf2565b5050509392505050565b600082601f830112613d3857613d3761395a565b5b8135613d48848260208601613cba565b91505092915050565b600067ffffffffffffffff821115613d6c57613d6b613975565b5b613d7582613964565b9050602081019050919050565b6000613d95613d9084613d51565b6139d5565b905082815260208101848484011115613db157613db061395f565b5b613dbc848285613a21565b509392505050565b600082601f830112613dd957613dd861395a565b5b8135613de9848260208601613d82565b91505092915050565b600080600080600060a08688031215613e0e57613e0d613797565b5b6000613e1c888289016137ea565b9550506020613e2d888289016137ea565b945050604086013567ffffffffffffffff811115613e4e57613e4d61379c565b5b613e5a88828901613d23565b935050606086013567ffffffffffffffff811115613e7b57613e7a61379c565b5b613e8788828901613d23565b925050608086013567ffffffffffffffff811115613ea857613ea761379c565b5b613eb488828901613dc4565b9150509295509295909350565b600067ffffffffffffffff821115613edc57613edb613975565b5b602082029050602081019050919050565b6000613f00613efb84613ec1565b6139d5565b90508083825260208201905060208402830185811115613f2357613f22613cb5565b5b835b81811015613f4c5780613f3888826137ea565b845260208401935050602081019050613f25565b5050509392505050565b600082601f830112613f6b57613f6a61395a565b5b8135613f7b848260208601613eed565b91505092915050565b60008060408385031215613f9b57613f9a613797565b5b600083013567ffffffffffffffff811115613fb957613fb861379c565b5b613fc585828601613f56565b925050602083013567ffffffffffffffff811115613fe657613fe561379c565b5b613ff285828601613d23565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b614031816137ff565b82525050565b60006140438383614028565b60208301905092915050565b6000602082019050919050565b600061406782613ffc565b6140718185614007565b935061407c83614018565b8060005b838110156140ad5781516140948882614037565b975061409f8361404f565b925050600181019050614080565b5085935050505092915050565b600060208201905081810360008301526140d4818461405c565b905092915050565b6000806000606084860312156140f5576140f4613797565b5b6000614103868287016137ea565b935050602084013567ffffffffffffffff8111156141245761412361379c565b5b61413086828701613d23565b925050604084013567ffffffffffffffff8111156141515761415061379c565b5b61415d86828701613d23565b9150509250925092565b6000806040838503121561417e5761417d613797565b5b600061418c85828601613820565b925050602061419d858286016137ea565b9150509250929050565b6141b0816137c1565b82525050565b6141bf81613aa0565b82525050565b6000610120820190506141db600083018c6141a7565b6141e8602083018b613875565b6141f5604083018a613875565b6142026060830189613875565b81810360808301526142148188613c2e565b905061422360a0830187613875565b61423060c08301866141b6565b61423d60e08301856141b6565b61424b6101008301846141b6565b9a9950505050505050505050565b600080604083850312156142705761426f613797565b5b600061427e85828601613820565b925050602083013567ffffffffffffffff81111561429f5761429e61379c565b5b6142ab85828601613a72565b9150509250929050565b60006020820190506142ca60008301846141a7565b92915050565b6142d981613924565b81146142e457600080fd5b50565b6000813590506142f6816142d0565b92915050565b6000806040838503121561431357614312613797565b5b6000614321858286016137ea565b9250506020614332858286016142e7565b9150509250929050565b6000806040838503121561435357614352613797565b5b600061436185828601613820565b925050602061437285828601613820565b9150509250929050565b6000806040838503121561439357614392613797565b5b60006143a1858286016137ea565b92505060206143b2858286016137ea565b9150509250929050565b600080600080600060a086880312156143d8576143d7613797565b5b60006143e6888289016137ea565b95505060206143f7888289016137ea565b945050604061440888828901613820565b935050606061441988828901613820565b925050608086013567ffffffffffffffff81111561443a5761443961379c565b5b61444688828901613dc4565b9150509295509295909350565b60006020828403121561446957614468613797565b5b6000614477848285016137ea565b91505092915050565b60008060006060848603121561449957614498613797565b5b60006144a7868287016137ea565b93505060206144b886828701613820565b92505060406144c986828701613820565b9150509250925092565b7f455243313135353a2061646472657373207a65726f206973206e6f742061207660008201527f616c6964206f776e657200000000000000000000000000000000000000000000602082015250565b600061452f602a83613bea565b915061453a826144d3565b604082019050919050565b6000602082019050818103600083015261455e81614522565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061459f826137ff565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156145d2576145d1614565565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061462457607f821691505b60208210811415614638576146376145dd565b5b50919050565b7f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60008201527f6572206e6f7220617070726f7665640000000000000000000000000000000000602082015250565b600061469a602f83613bea565b91506146a58261463e565b604082019050919050565b600060208201905081810360008301526146c98161468d565b9050919050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b600061472c602983613bea565b9150614737826146d0565b604082019050919050565b6000602082019050818103600083015261475b8161471f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061479c826137ff565b91506147a7836137ff565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156147e0576147df614565565b5b828202905092915050565b60006147f6826137ff565b9150614801836137ff565b92508282101561481457614813614565565b5b828203905092915050565b600061482a826137ff565b9150614835836137ff565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561486a57614869614565565b5b828201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006148d1602683613bea565b91506148dc82614875565b604082019050919050565b60006020820190508181036000830152614900816148c4565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061493d602083613bea565b915061494882614907565b602082019050919050565b6000602082019050818103600083015261496c81614930565b9050919050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006149cf602183613bea565b91506149da82614973565b604082019050919050565b600060208201905081810360008301526149fe816149c2565b9050919050565b6000604082019050614a1a6000830185613875565b614a276020830184613875565b9392505050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b6000614a8a602883613bea565b9150614a9582614a2e565b604082019050919050565b60006020820190508181036000830152614ab981614a7d565b9050919050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000614b1c602583613bea565b9150614b2782614ac0565b604082019050919050565b60006020820190508181036000830152614b4b81614b0f565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b6000614bae602a83613bea565b9150614bb982614b52565b604082019050919050565b60006020820190508181036000830152614bdd81614ba1565b9050919050565b60006040820190508181036000830152614bfe818561405c565b90508181036020830152614c12818461405c565b90509392505050565b7f455243313135353a206275726e2066726f6d20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000614c77602383613bea565b9150614c8282614c1b565b604082019050919050565b60006020820190508181036000830152614ca681614c6a565b9050919050565b7f455243313135353a206275726e20616d6f756e7420657863656564732062616c60008201527f616e636500000000000000000000000000000000000000000000000000000000602082015250565b6000614d09602483613bea565b9150614d1482614cad565b604082019050919050565b60006020820190508181036000830152614d3881614cfc565b9050919050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b6000614d9b602983613bea565b9150614da682614d3f565b604082019050919050565b60006020820190508181036000830152614dca81614d8e565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b6000614e07601083613bea565b9150614e1282614dd1565b602082019050919050565b60006020820190508181036000830152614e3681614dfa565b9050919050565b6000604082019050614e5260008301856141a7565b614e5f6020830184613875565b9392505050565b6000606082019050614e7b60008301866141a7565b614e8860208301856141a7565b614e956040830184613875565b949350505050565b600081519050919050565b600082825260208201905092915050565b6000614ec482614e9d565b614ece8185614ea8565b9350614ede818560208601613bfb565b614ee781613964565b840191505092915050565b600060a082019050614f0760008301886141a7565b614f1460208301876141a7565b614f216040830186613875565b614f2e6060830185613875565b8181036080830152614f408184614eb9565b90509695505050505050565b600081519050614f5b816138cb565b92915050565b600060208284031215614f7757614f76613797565b5b6000614f8584828501614f4c565b91505092915050565b60008160e01c9050919050565b600060033d1115614fba5760046000803e614fb7600051614f8e565b90505b90565b600060443d1015614fcd57615050565b614fd561378d565b60043d036004823e80513d602482011167ffffffffffffffff82111715614ffd575050615050565b808201805167ffffffffffffffff81111561501b5750505050615050565b80602083010160043d038501811115615038575050505050615050565b615047826020018501866139a4565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b60006150af603483613bea565b91506150ba82615053565b604082019050919050565b600060208201905081810360008301526150de816150a2565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b6000615141602883613bea565b915061514c826150e5565b604082019050919050565b6000602082019050818103600083015261517081615134565b9050919050565b600060a08201905061518c60008301886141a7565b61519960208301876141a7565b81810360408301526151ab818661405c565b905081810360608301526151bf818561405c565b905081810360808301526151d38184614eb9565b90509695505050505050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b6000615215601483613bea565b9150615220826151df565b602082019050919050565b6000602082019050818103600083015261524481615208565b9050919050565b60008151905061525a816142d0565b92915050565b60006020828403121561527657615275613797565b5b60006152848482850161524b565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006152e9602a83613bea565b91506152f48261528d565b604082019050919050565b60006020820190508181036000830152615318816152dc565b9050919050565b7f455243313135355061757361626c653a20746f6b656e207472616e736665722060008201527f7768696c65207061757365640000000000000000000000000000000000000000602082015250565b600061537b602c83613bea565b91506153868261531f565b604082019050919050565b600060208201905081810360008301526153aa8161536e565b9050919050565b7f455243313135353a206275726e20616d6f756e74206578636565647320746f7460008201527f616c537570706c79000000000000000000000000000000000000000000000000602082015250565b600061540d602883613bea565b9150615418826153b1565b604082019050919050565b6000602082019050818103600083015261543c81615400565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b600061549f602683613bea565b91506154aa82615443565b604082019050919050565b600060208201905081810360008301526154ce81615492565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b600061550b601d83613bea565b9150615516826154d5565b602082019050919050565b6000602082019050818103600083015261553a816154fe565b9050919050565b600081905092915050565b600061555782614e9d565b6155618185615541565b9350615571818560208601613bfb565b80840191505092915050565b6000615589828461554c565b91508190509291505056fea2646970667358221220764eb1462793898e005120dd5fc29c2caabc3ed1dd8b3cf091ffdb91bcaab33364736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "exists(uint256)": {
        "details": "Indicates whether any token exist with a given id, or not."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "repay(uint256,uint256)": {
        "details": "It is not able to repay after fully repaying the loan. The caller need to approve the repaying token. There are 3 cases. 1. block.timestamp < startTimestamp: repay only the principal. 2. startTs <= block.timestamp <= endTs: repay principal + interest 3. endTs < block.timestamp: repay principal + interest + overdue interest",
        "params": {
          "_amount": "amount of token to repay. type(uint256).max means to repay all.",
          "_id": "token id"
        }
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "totalSupply(uint256)": {
        "details": "Total amount of tokens in with a given id."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claim(address,uint256)": {
        "notice": "Nft holders claim their interest. NOTE: Users with zero balance are also able to claim."
      },
      "getUnitDebt(uint256)": {
        "notice": "The debt does not increase after repaid."
      }
    },
    "notice": "This repays the interest monthly. At the maturity date, lenders receive the principal and one-month interest.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 246,
        "contract": "contracts/CouponBond.sol:CouponBond",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 252,
        "contract": "contracts/CouponBond.sol:CouponBond",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 254,
        "contract": "contracts/CouponBond.sol:CouponBond",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 1733,
        "contract": "contracts/CouponBond.sol:CouponBond",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 130,
        "contract": "contracts/CouponBond.sol:CouponBond",
        "label": "_paused",
        "offset": 0,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 7,
        "contract": "contracts/CouponBond.sol:CouponBond",
        "label": "_owner",
        "offset": 1,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2712,
        "contract": "contracts/CouponBond.sol:CouponBond",
        "label": "products",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(Product)2707_storage)"
      },
      {
        "astId": 2714,
        "contract": "contracts/CouponBond.sol:CouponBond",
        "label": "numProducts",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2720,
        "contract": "contracts/CouponBond.sol:CouponBond",
        "label": "lastUpdatedTs",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2726,
        "contract": "contracts/CouponBond.sol:CouponBond",
        "label": "unclaimedInterest",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Product)2707_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CouponBond.Product)",
        "numberOfBytes": "32",
        "value": "t_struct(Product)2707_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Product)2707_storage": {
        "encoding": "inplace",
        "label": "struct CouponBond.Product",
        "members": [
          {
            "astId": 2690,
            "contract": "contracts/CouponBond.sol:CouponBond",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2692,
            "contract": "contracts/CouponBond.sol:CouponBond",
            "label": "value",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2694,
            "contract": "contracts/CouponBond.sol:CouponBond",
            "label": "interestPerSecond",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2696,
            "contract": "contracts/CouponBond.sol:CouponBond",
            "label": "overdueInterestPerSecond",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2698,
            "contract": "contracts/CouponBond.sol:CouponBond",
            "label": "uri",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 2700,
            "contract": "contracts/CouponBond.sol:CouponBond",
            "label": "tokenBalance",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 2702,
            "contract": "contracts/CouponBond.sol:CouponBond",
            "label": "startTs",
            "offset": 0,
            "slot": "6",
            "type": "t_uint64"
          },
          {
            "astId": 2704,
            "contract": "contracts/CouponBond.sol:CouponBond",
            "label": "endTs",
            "offset": 8,
            "slot": "6",
            "type": "t_uint64"
          },
          {
            "astId": 2706,
            "contract": "contracts/CouponBond.sol:CouponBond",
            "label": "repaidTs",
            "offset": 16,
            "slot": "6",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}