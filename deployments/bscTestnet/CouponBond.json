{
  "address": "0xc2732ece3B48c8679820cA9FFF5C0c842A17E963",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "AlreadyRepaid",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "EarlyClaim",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EarlyWithdraw",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFinalValue",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "NotRepaid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroBalanceClaim",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "ZeroBalanceWithdraw",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_initialSupply",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_interestPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_overdueInterestPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        },
        {
          "internalType": "uint64",
          "name": "_startTs",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_endTs",
          "type": "uint64"
        }
      ],
      "name": "addProduct",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getTotalDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getUnclaimedInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getUnitDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getUnpaidDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "isRepaid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastUpdatedTs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numProducts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "previewClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "products",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "overdueInterestPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "totalRepaid",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "startTs",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "endTs",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "repaidTs",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "unclaimedInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa6515caddb7e70a47656b878acba86b990bd36e0fe8d00b723ca8a597d19050a",
  "receipt": {
    "to": null,
    "from": "0x4B994361257d060cF20dab2F13286B16B0019FdE",
    "contractAddress": "0xc2732ece3B48c8679820cA9FFF5C0c842A17E963",
    "transactionIndex": 0,
    "gasUsed": "4769919",
    "logsBloom": "0x
    "blockHash": "0x3e91ad169c783411ac874f1ff0be60b435b7ef04656f4cf498f189e9a17a05a4",
    "transactionHash": "0xa6515caddb7e70a47656b878acba86b990bd36e0fe8d00b723ca8a597d19050a",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 23265586,
        "transactionHash": "0xa6515caddb7e70a47656b878acba86b990bd36e0fe8d00b723ca8a597d19050a",
        "address": "0xc2732ece3B48c8679820cA9FFF5C0c842A17E963",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004b994361257d060cf20dab2f13286b16b0019fde"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x3e91ad169c783411ac874f1ff0be60b435b7ef04656f4cf498f189e9a17a05a4"
      }
    ],
    "blockNumber": 23265586,
    "cumulativeGasUsed": "4769919",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "69ac52bf3309ea43efa95419a45b35eb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"AlreadyRepaid\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"EarlyClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EarlyWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFinalValue\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"NotRepaid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroBalanceClaim\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"ZeroBalanceWithdraw\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interestPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_overdueInterestPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"_startTs\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_endTs\",\"type\":\"uint64\"}],\"name\":\"addProduct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getTotalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getUnclaimedInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getUnitDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getUnpaidDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isRepaid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastUpdatedTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numProducts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"previewClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"products\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overdueInterestPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalRepaid\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"startTs\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTs\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"repaidTs\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unclaimedInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"exists(uint256)\":{\"details\":\"Indicates whether any token exist with a given id, or not.\"},\"getTotalDebt(uint256)\":{\"details\":\"ERC-1155 totalSupply has no decimal. Therefore, just multiply totalSupply * debt per token\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"repay(uint256,uint256)\":{\"details\":\"It is not able to repay after fully repaying the loan. The caller need to approve the repaying token. There are 3 cases. 1. block.timestamp < startTimestamp: repay only the principal. 2. startTs <= block.timestamp <= endTs: repay principal + interest 3. endTs < block.timestamp: repay principal + interest + overdue interest\",\"params\":{\"_amount\":\"amount of token to repay. type(uint256).max means to repay all.\",\"_id\":\"token id\"}},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalSupply(uint256)\":{\"details\":\"Total amount of tokens in with a given id.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claim(address,uint256)\":{\"notice\":\"Nft holders claim their interest. Users with zero balance are also able to claim because they might have once had it, but transferred.\"},\"getUnclaimedInterest(address,uint256)\":{\"notice\":\"Calculate unclaimed interest\"},\"getUnitDebt(uint256)\":{\"notice\":\"Calculate the debt value if it has never been claimed. It does not increase after repaid.\"},\"getUnpaidDebt(uint256)\":{\"notice\":\"Calculate the debt value to be fully repaid.\"},\"isRepaid(uint256)\":{\"notice\":\"Show whether the loan is repaid.\"},\"previewClaim(address,uint256)\":{\"notice\":\"Calculate how many tokens to receive on claim.\"}},\"notice\":\"This repays the interest monthly. At the maturity date, lenders receive the principal and one-month interest.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CouponBond.sol\":\"CouponBond\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x447a21c87433c0f11252912313a96f3454629ef88cca7a4eefbb283b3ec409f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/extensions/ERC1155Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155Burnable is ERC1155 {\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 value\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n\\n        _burnBatch(account, ids, values);\\n    }\\n}\\n\",\"keccak256\":\"0xb11d1ade7146ac3da122e1f387ea82b0bd385d50823946c3f967dbffef3e9f4f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/ERC1155Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\nimport \\\"../../../security/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC1155 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155Pausable is ERC1155, Pausable {\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        require(!paused(), \\\"ERC1155Pausable: token transfer while paused\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xdad22b949de979bb2ad9001c044b2aeaacf8a25e3de09ed6f022a9469f936d5b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155Supply.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155Supply is ERC1155 {\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return ERC1155Supply.totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] += amounts[i];\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 id = ids[i];\\n                uint256 amount = amounts[i];\\n                uint256 supply = _totalSupply[id];\\n                require(supply >= amount, \\\"ERC1155: burn amount exceeds totalSupply\\\");\\n                unchecked {\\n                    _totalSupply[id] = supply - amount;\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe3deb5f3b0c9d12944f62ab680f041bbf1910d9d3ac6b545b4b8e399643c538d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/CouponBond.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/ICouponBond.sol\\\";\\n\\n// import \\\"../lib/forge-std/src/console2.sol\\\";\\n\\n/// @notice This repays the interest monthly. At the maturity date, lenders receive the principal and one-month interest.\\ncontract CouponBond is\\n    ICouponBond,\\n    ERC1155Supply,\\n    ERC1155Burnable,\\n    ERC1155Pausable,\\n    Ownable\\n{\\n    using SafeERC20 for IERC20;\\n\\n    error ZeroBalanceClaim();\\n    error EarlyClaim(address _from, uint256 _id);\\n    error ZeroBalanceWithdraw(uint256 _id);\\n    error EarlyWithdraw();\\n    error InvalidFinalValue();\\n    error NotRepaid(uint256 _id);\\n    error AlreadyRepaid(uint256 _id);\\n\\n    mapping(uint256 => Product) public products;\\n    uint256 public numProducts;\\n\\n    mapping(uint256 => mapping(address => uint256)) public lastUpdatedTs;\\n    mapping(uint256 => mapping(address => uint256)) public unclaimedInterest;\\n\\n    constructor() ERC1155(\\\"\\\") Pausable() {}\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function addProduct(\\n        uint256 _initialSupply,\\n        address _token,\\n        uint256 _value,\\n        uint256 _interestPerSecond,\\n        uint256 _overdueInterestPerSecond,\\n        string memory _uri,\\n        uint64 _startTs,\\n        uint64 _endTs\\n    ) external onlyOwner {\\n        Product memory newProduct = Product({\\n            token: _token,\\n            value: _value,\\n            interestPerSecond: _interestPerSecond,\\n            overdueInterestPerSecond: _overdueInterestPerSecond,\\n            uri: _uri,\\n            totalRepaid: 0,\\n            startTs: _startTs,\\n            endTs: _endTs,\\n            repaidTs: 0\\n        });\\n        products[numProducts] = newProduct;\\n\\n        _mint(owner(), numProducts, _initialSupply, \\\"\\\");\\n        numProducts++;\\n    }\\n\\n    function setURI(uint256 _id, string memory _uri) external onlyOwner {\\n        products[_id].uri = _uri;\\n    }\\n\\n    /// @inheritdoc ICouponBond\\n    function repay(uint256 _id, uint256 _amount) external override {\\n        Product storage product = products[_id];\\n        uint256 repayingAmount = _amount;\\n\\n        if (isRepaid(_id)) revert AlreadyRepaid(_id);\\n\\n        uint256 unpaidDebt = getUnpaidDebt(_id);\\n        if (_amount == type(uint256).max) {\\n            repayingAmount = unpaidDebt;\\n        }\\n\\n        product.totalRepaid += repayingAmount;\\n\\n        if (getTotalDebt(_id) <= product.totalRepaid) {\\n            product.repaidTs = uint64(block.timestamp);\\n        }\\n\\n        IERC20(product.token).safeTransferFrom(\\n            _msgSender(),\\n            address(this),\\n            repayingAmount\\n        );\\n    }\\n\\n    /// @inheritdoc ICouponBond\\n    function claim(address _to, uint256 _id) external override whenNotPaused {\\n        Product storage product = products[_id];\\n        uint256 receiveAmount;\\n\\n        _updateInterest(_to, _id);\\n\\n        if (isRepaid(_id)) {\\n            uint256 balance = balanceOf(_to, _id);\\n\\n            // Both interest & principal\\n            receiveAmount =\\n                (product.value * balance) +\\n                unclaimedInterest[_id][_to];\\n\\n            _burn(_to, _id, balance);\\n        } else {\\n            // only interest\\n            receiveAmount = unclaimedInterest[_id][_to];\\n        }\\n\\n        unclaimedInterest[_id][_to] = 0;\\n        // Already done in _updateInterest\\n        // lastUpdatedTs[_id][_to] = block.timestamp;\\n\\n        IERC20(product.token).safeTransfer(_to, receiveAmount);\\n    }\\n\\n    // ********** view ********** //\\n\\n    function uri(uint256 _id) public view override returns (string memory) {\\n        return products[_id].uri;\\n    }\\n\\n    function isRepaid(uint256 _id) public view override returns (bool) {\\n        return products[_id].repaidTs != 0;\\n    }\\n\\n    function previewClaim(address _lender, uint256 _id)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        if (isRepaid(_id)) {\\n            return\\n                balanceOf(_lender, _id) *\\n                products[_id].value +\\n                getUnclaimedInterest(_lender, _id);\\n        } else {\\n            return getUnclaimedInterest(_lender, _id);\\n        }\\n    }\\n\\n    /// @dev ERC-1155 totalSupply has no decimal. Therefore, just multiply totalSupply * debt per token\\n    function getTotalDebt(uint256 _id) public view override returns (uint256) {\\n        return totalSupply(_id) * getUnitDebt(_id);\\n    }\\n\\n    /// @inheritdoc ICouponBond\\n    function getUnitDebt(uint256 _id) public view override returns (uint256) {\\n        Product storage product = products[_id];\\n        return\\n            product.value +\\n            _calculateInterest(\\n                product.interestPerSecond,\\n                product.overdueInterestPerSecond,\\n                product.startTs, // calculate from the start\\n                product.endTs,\\n                product.repaidTs\\n            );\\n    }\\n\\n    /// @inheritdoc ICouponBond\\n    function getUnpaidDebt(uint256 _id) public view override returns (uint256) {\\n        Product storage product = products[_id];\\n        return getTotalDebt(_id) - product.totalRepaid;\\n    }\\n\\n    /// @inheritdoc ICouponBond\\n    function getUnclaimedInterest(address _to, uint256 _id)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return unclaimedInterest[_id][_to] + _getAdditionalInterest(_to, _id);\\n    }\\n\\n    // ****** internal ****** //\\n\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override(ERC1155, ERC1155Supply, ERC1155Pausable) {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from != address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 id = ids[i];\\n                _updateInterest(from, id);\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 id = ids[i];\\n                _updateInterest(to, id);\\n            }\\n        }\\n    }\\n\\n    function _getAdditionalInterest(address _to, uint256 _id)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        Product storage product = products[_id];\\n        uint256 userLastUpdatedTs = lastUpdatedTs[_id][_to];\\n\\n        // Since a user may have transferred before startTs, userLastUpdatedTs may not be zero and less than product.startTs.\\n        if (userLastUpdatedTs < product.startTs) {\\n            userLastUpdatedTs = product.startTs;\\n        }\\n\\n        return\\n            balanceOf(_to, _id) *\\n            _calculateInterest(\\n                product.interestPerSecond,\\n                product.overdueInterestPerSecond,\\n                userLastUpdatedTs,\\n                product.endTs,\\n                product.repaidTs\\n            );\\n    }\\n\\n    /// @notice Save the current unclaimed interest and the updated timestamp.\\n    function _updateInterest(address _to, uint256 _id) internal {\\n        if (block.timestamp < products[_id].startTs) return;\\n        // if (products[_id].repaidTs <= lastUpdatedTs[_id][_to]) return;\\n\\n        unclaimedInterest[_id][_to] = getUnclaimedInterest(_to, _id);\\n        lastUpdatedTs[_id][_to] = block.timestamp;\\n    }\\n\\n    function _calculateInterest(\\n        uint256 _interestPerSecond,\\n        uint256 _overdueInterestPerSecond,\\n        uint256 _lastUpdatedTs,\\n        uint256 _endTs,\\n        uint256 _repaidTs\\n    ) internal view returns (uint256) {\\n        uint256 currentTs = _repaidTs == 0 ? block.timestamp : _repaidTs;\\n        if (currentTs <= _lastUpdatedTs) return 0;\\n\\n        uint256 timeDelta = currentTs - _lastUpdatedTs;\\n        uint256 interest = _interestPerSecond * timeDelta;\\n        if (_endTs < currentTs) {\\n            uint256 latest = _endTs > _lastUpdatedTs ? _endTs : _lastUpdatedTs;\\n            interest += _overdueInterestPerSecond * (currentTs - latest);\\n        }\\n\\n        return interest;\\n    }\\n}\\n\",\"keccak256\":\"0x81261ad98b59c50f9c9beb408252d713f40de10f3225821fc9a4780b01c01b44\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ICouponBond.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\ninterface ICouponBond {\\n    /// @param token                    the token borrowed and to be repaid.\\n    /// @param value                    value per token in WAD, e.g. $100\\n    /// @param interestPerSecond        interest rate per token in second. WAD. e.g. 15%\\n    /// @param overdueInterestPerSecond additional interest rate per token when overdue. WAD. e.g. 3% -> total 18% when overdue\\n    /// @param uri                      uri for the product\\n    /// @param totalRepaid              total amount of token repaid. decimal is the same with `token`.\\n    /// @param startTs                  when the loan starts\\n    /// @param endTs                    when the loan should be repaid\\n    /// @param repaidTs                 when the loan is actually repaid\\n    struct Product {\\n        address token;\\n        uint256 value;\\n        uint256 interestPerSecond;\\n        uint256 overdueInterestPerSecond;\\n        string uri;\\n        uint256 totalRepaid;\\n        uint64 startTs;\\n        uint64 endTs;\\n        uint64 repaidTs;\\n    }\\n\\n    function addProduct(\\n        uint256 _initialSupply,\\n        address _token,\\n        uint256 _value,\\n        uint256 _interestPerSecond,\\n        uint256 _overdueInterestPerSecond,\\n        string memory _uri,\\n        uint64 _startTs,\\n        uint64 _endTs\\n    ) external;\\n\\n    /// @dev It is not able to repay after fully repaying the loan.\\n    /// The caller need to approve the repaying token.\\n    /// There are 3 cases.\\n    /// 1. block.timestamp < startTimestamp: repay only the principal.\\n    /// 2. startTs <= block.timestamp <= endTs: repay principal + interest\\n    /// 3. endTs < block.timestamp: repay principal + interest + overdue interest\\n    /// @param _id token id\\n    /// @param _amount amount of token to repay. type(uint256).max means to repay all.\\n    function repay(uint256 _id, uint256 _amount) external;\\n\\n    /// @notice Nft holders claim their interest.\\n    /// Users with zero balance are also able to claim because they might have once had it, but transferred.\\n    function claim(address _to, uint256 _id) external;\\n\\n    // ********** view ********** //\\n    /// @notice Show whether the loan is repaid.\\n    function isRepaid(uint256 _id) external view returns (bool);\\n\\n    /// @notice Calculate how many tokens to receive on claim.\\n    function previewClaim(address _lender, uint256 _id)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice Calculate the total debt regardless of the repaid amount.\\n    function getTotalDebt(uint256 _id) external view returns (uint256);\\n\\n    /// @notice Calculate the debt value if it has never been claimed.\\n    /// It does not increase after repaid.\\n    function getUnitDebt(uint256 _id) external view returns (uint256);\\n\\n    /// @notice Calculate unclaimed interest\\n    function getUnclaimedInterest(address _to, uint256 _id)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice Calculate the debt value to be fully repaid.\\n    function getUnpaidDebt(uint256 _id) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xbf28fb8dc54b7b931c99f2583077a27f4ff8653d1282133552edcfaadcd748cc\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040518060200160405280600081525062000033816200007560201b60201c565b506000600460006101000a81548160ff0219169083151502179055506200006f620000636200009160201b60201c565b6200009960201b60201c565b62000274565b80600290805190602001906200008d9291906200015f565b5050565b600033905090565b6000600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600460016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8280546200016d906200023e565b90600052602060002090601f016020900481019282620001915760008555620001dd565b82601f10620001ac57805160ff1916838001178555620001dd565b82800160010185558215620001dd579182015b82811115620001dc578251825591602001919060010190620001bf565b5b509050620001ec9190620001f0565b5090565b5b808211156200020b576000816000905550600101620001f1565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200025757607f821691505b602082108114156200026e576200026d6200020f565b5b50919050565b61550780620002846000396000f3fe608060405234801561001057600080fd5b50600436106101ef5760003560e01c80637acc0b201161010f578063bcb8e5a5116100a2578063f242432a11610071578063f242432a14610608578063f2fde38b14610624578063f5298aca14610640578063fea1e1c21461065c576101ef565b8063bcb8e5a51461055c578063bd85b0391461058c578063d8aed145146105bc578063e985e9c5146105d8576101ef565b80638e1eb411116100de5780638e1eb411146104d6578063a22cb46514610506578063aad3ec9614610522578063ac964f211461053e576101ef565b80637acc0b201461045a5780638456cb5914610492578063862440e21461049c5780638da5cb5b146104b8576101ef565b80634e1273f411610187578063715018a611610156578063715018a6146103c057806371cf7693146103ca57806375a397a1146103fa578063774bc5be1461042a576101ef565b80634e1273f4146103265780634f558e79146103565780635c975abb146103865780636b20c454146103a4576101ef565b806320e53acb116101c357806320e53acb146102a05780632eb2c2d6146102d05780633f4ba83a146102ec578063486501c5146102f6576101ef565b8062fdd58e146101f457806301ffc9a71461022457806304cefd83146102545780630e89341c14610270575b600080fd5b61020e60048036038101906102099190613772565b61068c565b60405161021b91906137c1565b60405180910390f35b61023e60048036038101906102399190613834565b610755565b60405161024b919061387c565b60405180910390f35b61026e60048036038101906102699190613a1d565b610837565b005b61028a60048036038101906102859190613aef565b610a33565b6040516102979190613ba4565b60405180910390f35b6102ba60048036038101906102b59190613772565b610adb565b6040516102c791906137c1565b60405180910390f35b6102ea60048036038101906102e59190613d2f565b610b4a565b005b6102f4610beb565b005b610310600480360381019061030b9190613aef565b610bfd565b60405161031d91906137c1565b60405180910390f35b610340600480360381019061033b9190613ec1565b610c22565b60405161034d9190613ff7565b60405180910390f35b610370600480360381019061036b9190613aef565b610d3b565b60405161037d919061387c565b60405180910390f35b61038e610d4f565b60405161039b919061387c565b60405180910390f35b6103be60048036038101906103b99190614019565b610d66565b005b6103c8610e03565b005b6103e460048036038101906103df9190613aef565b610e17565b6040516103f191906137c1565b60405180910390f35b610414600480360381019061040f91906140a4565b610e4f565b60405161042191906137c1565b60405180910390f35b610444600480360381019061043f9190613aef565b610e74565b60405161045191906137c1565b60405180910390f35b610474600480360381019061046f9190613aef565b610f1e565b60405161048999989796959493929190614102565b60405180910390f35b61049a611050565b005b6104b660048036038101906104b19190614196565b611062565b005b6104c0611099565b6040516104cd91906141f2565b60405180910390f35b6104f060048036038101906104eb9190613aef565b6110c3565b6040516104fd919061387c565b60405180910390f35b610520600480360381019061051b9190614239565b611104565b005b61053c60048036038101906105379190613772565b61111a565b005b6105466112de565b60405161055391906137c1565b60405180910390f35b61057660048036038101906105719190613772565b6112e4565b60405161058391906137c1565b60405180910390f35b6105a660048036038101906105a19190613aef565b61134d565b6040516105b391906137c1565b60405180910390f35b6105d660048036038101906105d19190614279565b61136a565b005b6105f260048036038101906105ed91906142b9565b6114c3565b6040516105ff919061387c565b60405180910390f35b610622600480360381019061061d91906142f9565b611557565b005b61063e60048036038101906106399190614390565b6115f8565b005b61065a600480360381019061065591906143bd565b61167c565b005b610676600480360381019061067191906140a4565b611719565b60405161068391906137c1565b60405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156106fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f490614482565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061082057507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610830575061082f8261173e565b5b9050919050565b61083f6117a8565b60006040518061012001604052808973ffffffffffffffffffffffffffffffffffffffff168152602001888152602001878152602001868152602001858152602001600081526020018467ffffffffffffffff1681526020018367ffffffffffffffff168152602001600067ffffffffffffffff1681525090508060056000600654815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004019080519060200190610950929190613627565b5060a0820151816005015560c08201518160060160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060e08201518160060160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506101008201518160060160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550905050610a106109f7611099565b6006548b60405180602001604052806000815250611826565b60066000815480929190610a23906144d1565b9190505550505050505050505050565b6060600560008381526020019081526020016000206004018054610a5690614549565b80601f0160208091040260200160405190810160405280929190818152602001828054610a8290614549565b8015610acf5780601f10610aa457610100808354040283529160200191610acf565b820191906000526020600020905b815481529060010190602001808311610ab257829003601f168201915b50505050509050919050565b6000610ae783836119d7565b6008600084815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610b42919061457b565b905092915050565b610b52611b0b565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610b985750610b9785610b92611b0b565b6114c3565b5b610bd7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bce90614643565b60405180910390fd5b610be48585858585611b13565b5050505050565b610bf36117a8565b610bfb611e35565b565b6000610c0882610e74565b610c118361134d565b610c1b9190614663565b9050919050565b60608151835114610c68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5f9061472f565b60405180910390fd5b6000835167ffffffffffffffff811115610c8557610c846138b2565b5b604051908082528060200260200182016040528015610cb35781602001602082028036833780820191505090505b50905060005b8451811015610d3057610d00858281518110610cd857610cd761474f565b5b6020026020010151858381518110610cf357610cf261474f565b5b602002602001015161068c565b828281518110610d1357610d1261474f565b5b60200260200101818152505080610d29906144d1565b9050610cb9565b508091505092915050565b600080610d478361134d565b119050919050565b6000600460009054906101000a900460ff16905090565b610d6e611b0b565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480610db45750610db383610dae611b0b565b6114c3565b5b610df3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dea90614643565b60405180910390fd5b610dfe838383611e98565b505050565b610e0b6117a8565b610e156000612167565b565b6000806005600084815260200190815260200160002090508060050154610e3d84610bfd565b610e47919061477e565b915050919050565b6007602052816000526040600020602052806000526040600020600091509150505481565b600080600560008481526020019081526020016000209050610f07816002015482600301548360060160009054906101000a900467ffffffffffffffff1667ffffffffffffffff168460060160089054906101000a900467ffffffffffffffff1667ffffffffffffffff168560060160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1661222d565b8160010154610f16919061457b565b915050919050565b60056020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001015490806002015490806003015490806004018054610f7990614549565b80601f0160208091040260200160405190810160405280929190818152602001828054610fa590614549565b8015610ff25780601f10610fc757610100808354040283529160200191610ff2565b820191906000526020600020905b815481529060010190602001808311610fd557829003601f168201915b5050505050908060050154908060060160009054906101000a900467ffffffffffffffff16908060060160089054906101000a900467ffffffffffffffff16908060060160109054906101000a900467ffffffffffffffff16905089565b6110586117a8565b6110606122c4565b565b61106a6117a8565b80600560008481526020019081526020016000206004019080519060200190611094929190613627565b505050565b6000600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000806005600084815260200190815260200160002060060160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1614159050919050565b61111661110f611b0b565b8383612327565b5050565b611122612494565b6000600560008381526020019081526020016000209050600061114584846124de565b61114e836110c3565b156111df57600061115f858561068c565b90506008600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548184600101546111c29190614663565b6111cc919061457b565b91506111d98585836125d7565b50611233565b6008600084815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b60006008600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506112d884828460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661281e9092919063ffffffff16565b50505050565b60065481565b60006112ef826110c3565b1561133a576112fe8383610adb565b600560008481526020019081526020016000206001015461131f858561068c565b6113299190614663565b611333919061457b565b9050611347565b6113448383610adb565b90505b92915050565b600060036000838152602001908152602001600020549050919050565b6000600560008481526020019081526020016000209050600082905061138f846110c3565b156113d157836040517f266b64850000000000000000000000000000000000000000000000000000000081526004016113c891906137c1565b60405180910390fd5b60006113dc85610e17565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84141561140a578091505b8183600501600082825461141e919061457b565b92505081905550826005015461143386610bfd565b1161146457428360060160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b6114bc61146f611b0b565b30848660000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166128a4909392919063ffffffff16565b5050505050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61155f611b0b565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614806115a557506115a48561159f611b0b565b6114c3565b5b6115e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115db90614643565b60405180910390fd5b6115f1858585858561292d565b5050505050565b6116006117a8565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611670576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166790614824565b60405180910390fd5b61167981612167565b50565b611684611b0b565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614806116ca57506116c9836116c4611b0b565b6114c3565b5b611709576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161170090614643565b60405180910390fd5b6117148383836125d7565b505050565b6008602052816000526040600020602052806000526040600020600091509150505481565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6117b0611b0b565b73ffffffffffffffffffffffffffffffffffffffff166117ce611099565b73ffffffffffffffffffffffffffffffffffffffff1614611824576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161181b90614890565b60405180910390fd5b565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611896576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188d90614922565b60405180910390fd5b60006118a0611b0b565b905060006118ad85612bc9565b905060006118ba85612bc9565b90506118cb83600089858589612c43565b8460008088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461192a919061457b565b925050819055508673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6289896040516119a8929190614942565b60405180910390a46119bf83600089858589612d53565b6119ce83600089898989612d5b565b50505050505050565b60008060056000848152602001908152602001600020905060006007600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508160060160009054906101000a900467ffffffffffffffff1667ffffffffffffffff16811015611a94578160060160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1690505b611aed82600201548360030154838560060160089054906101000a900467ffffffffffffffff1667ffffffffffffffff168660060160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1661222d565b611af7868661068c565b611b019190614663565b9250505092915050565b600033905090565b8151835114611b57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4e906149dd565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611bc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bbe90614a6f565b60405180910390fd5b6000611bd1611b0b565b9050611be1818787878787612c43565b60005b8451811015611d92576000858281518110611c0257611c0161474f565b5b602002602001015190506000858381518110611c2157611c2061474f565b5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611cc2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cb990614b01565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611d77919061457b565b9250508190555050505080611d8b906144d1565b9050611be4565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611e09929190614b21565b60405180910390a4611e1f818787878787612d53565b611e2d818787878787612f42565b505050505050565b611e3d613129565b6000600460006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611e81611b0b565b604051611e8e91906141f2565b60405180910390a1565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611f08576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eff90614bca565b60405180910390fd5b8051825114611f4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f43906149dd565b60405180910390fd5b6000611f56611b0b565b9050611f7681856000868660405180602001604052806000815250612c43565b60005b83518110156120c3576000848281518110611f9757611f9661474f565b5b602002602001015190506000848381518110611fb657611fb561474f565b5b60200260200101519050600080600084815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015612057576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161204e90614c5c565b60405180910390fd5b81810360008085815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050505080806120bb906144d1565b915050611f79565b50600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb868660405161213b929190614b21565b60405180910390a461216181856000868660405180602001604052806000815250612d53565b50505050565b6000600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600460016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000806000831461223e5782612240565b425b90508481116122535760009150506122bb565b60008582612261919061477e565b9050600081896122719190614663565b9050828610156122b457600087871161228a578761228c565b865b9050808461229a919061477e565b896122a59190614663565b826122b0919061457b565b9150505b8093505050505b95945050505050565b6122cc612494565b6001600460006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612310611b0b565b60405161231d91906141f2565b60405180910390a1565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612396576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161238d90614cee565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051612487919061387c565b60405180910390a3505050565b61249c610d4f565b156124dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124d390614d5a565b60405180910390fd5b565b6005600082815260200190815260200160002060060160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1642101561251f576125d3565b6125298282610adb565b6008600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550426007600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612647576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161263e90614bca565b60405180910390fd5b6000612651611b0b565b9050600061265e84612bc9565b9050600061266b84612bc9565b905061268b83876000858560405180602001604052806000815250612c43565b600080600087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905084811015612722576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161271990614c5c565b60405180910390fd5b84810360008088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6289896040516127ef929190614942565b60405180910390a461281584886000868660405180602001604052806000815250612d53565b50505050505050565b61289f8363a9059cbb60e01b848460405160240161283d929190614d7a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613172565b505050565b612927846323b872dd60e01b8585856040516024016128c593929190614da3565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613172565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561299d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161299490614a6f565b60405180910390fd5b60006129a7611b0b565b905060006129b485612bc9565b905060006129c185612bc9565b90506129d1838989858589612c43565b600080600088815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905085811015612a68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a5f90614b01565b60405180910390fd5b85810360008089815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508560008089815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612b1d919061457b565b925050819055508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628a8a604051612b9a929190614942565b60405180910390a4612bb0848a8a86868a612d53565b612bbe848a8a8a8a8a612d5b565b505050505050505050565b60606000600167ffffffffffffffff811115612be857612be76138b2565b5b604051908082528060200260200182016040528015612c165781602001602082028036833780820191505090505b5090508281600081518110612c2e57612c2d61474f565b5b60200260200101818152505080915050919050565b612c51868686868686613239565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614612cce5760005b8351811015612ccc576000848281518110612ca657612ca561474f565b5b60200260200101519050612cba87826124de565b5080612cc5906144d1565b9050612c88565b505b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614612d4b5760005b8351811015612d49576000848281518110612d2357612d2261474f565b5b60200260200101519050612d3786826124de565b5080612d42906144d1565b9050612d05565b505b505050505050565b505050505050565b612d7a8473ffffffffffffffffffffffffffffffffffffffff16613297565b15612f3a578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401612dc0959493929190614e2f565b602060405180830381600087803b158015612dda57600080fd5b505af1925050508015612e0b57506040513d601f19601f82011682018060405250810190612e089190614e9e565b60015b612eb157612e17614ed8565b806308c379a01415612e745750612e2c614efa565b80612e375750612e76565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e6b9190613ba4565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ea890615002565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612f38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f2f90615094565b60405180910390fd5b505b505050505050565b612f618473ffffffffffffffffffffffffffffffffffffffff16613297565b15613121578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401612fa79594939291906150b4565b602060405180830381600087803b158015612fc157600080fd5b505af1925050508015612ff257506040513d601f19601f82011682018060405250810190612fef9190614e9e565b60015b61309857612ffe614ed8565b806308c379a0141561305b5750613013614efa565b8061301e575061305d565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130529190613ba4565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161308f90615002565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461311f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161311690615094565b60405180910390fd5b505b505050505050565b613131610d4f565b613170576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161316790615168565b60405180910390fd5b565b60006131d4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166132ba9092919063ffffffff16565b905060008151111561323457808060200190518101906131f4919061519d565b613233576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161322a9061523c565b60405180910390fd5b5b505050565b6132478686868686866132d2565b61324f610d4f565b1561328f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613286906152ce565b60405180910390fd5b505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60606132c984846000856134a4565b90509392505050565b6132e08686868686866135b8565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614156133925760005b8351811015613390578281815181106133345761333361474f565b5b6020026020010151600360008684815181106133535761335261474f565b5b602002602001015181526020019081526020016000206000828254613378919061457b565b9250508190555080613389906144d1565b9050613318565b505b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561349c5760005b835181101561349a5760008482815181106133e8576133e761474f565b5b6020026020010151905060008483815181106134075761340661474f565b5b602002602001015190506000600360008481526020019081526020016000205490508181101561346c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161346390615360565b60405180910390fd5b818103600360008581526020019081526020016000208190555050505080613493906144d1565b90506133ca565b505b505050505050565b6060824710156134e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134e0906153f2565b60405180910390fd5b6134f285613297565b613531576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135289061545e565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161355a91906154ba565b60006040518083038185875af1925050503d8060008114613597576040519150601f19603f3d011682016040523d82523d6000602084013e61359c565b606091505b50915091506135ac8282866135c0565b92505050949350505050565b505050505050565b606083156135d057829050613620565b6000835111156135e35782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016136179190613ba4565b60405180910390fd5b9392505050565b82805461363390614549565b90600052602060002090601f016020900481019282613655576000855561369c565b82601f1061366e57805160ff191683800117855561369c565b8280016001018555821561369c579182015b8281111561369b578251825591602001919060010190613680565b5b5090506136a991906136ad565b5090565b5b808211156136c65760008160009055506001016136ae565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613709826136de565b9050919050565b613719816136fe565b811461372457600080fd5b50565b60008135905061373681613710565b92915050565b6000819050919050565b61374f8161373c565b811461375a57600080fd5b50565b60008135905061376c81613746565b92915050565b60008060408385031215613789576137886136d4565b5b600061379785828601613727565b92505060206137a88582860161375d565b9150509250929050565b6137bb8161373c565b82525050565b60006020820190506137d660008301846137b2565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b613811816137dc565b811461381c57600080fd5b50565b60008135905061382e81613808565b92915050565b60006020828403121561384a576138496136d4565b5b60006138588482850161381f565b91505092915050565b60008115159050919050565b61387681613861565b82525050565b6000602082019050613891600083018461386d565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6138ea826138a1565b810181811067ffffffffffffffff82111715613909576139086138b2565b5b80604052505050565b600061391c6136ca565b905061392882826138e1565b919050565b600067ffffffffffffffff821115613948576139476138b2565b5b613951826138a1565b9050602081019050919050565b82818337600083830152505050565b600061398061397b8461392d565b613912565b90508281526020810184848401111561399c5761399b61389c565b5b6139a784828561395e565b509392505050565b600082601f8301126139c4576139c3613897565b5b81356139d484826020860161396d565b91505092915050565b600067ffffffffffffffff82169050919050565b6139fa816139dd565b8114613a0557600080fd5b50565b600081359050613a17816139f1565b92915050565b600080600080600080600080610100898b031215613a3e57613a3d6136d4565b5b6000613a4c8b828c0161375d565b9850506020613a5d8b828c01613727565b9750506040613a6e8b828c0161375d565b9650506060613a7f8b828c0161375d565b9550506080613a908b828c0161375d565b94505060a089013567ffffffffffffffff811115613ab157613ab06136d9565b5b613abd8b828c016139af565b93505060c0613ace8b828c01613a08565b92505060e0613adf8b828c01613a08565b9150509295985092959890939650565b600060208284031215613b0557613b046136d4565b5b6000613b138482850161375d565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613b56578082015181840152602081019050613b3b565b83811115613b65576000848401525b50505050565b6000613b7682613b1c565b613b808185613b27565b9350613b90818560208601613b38565b613b99816138a1565b840191505092915050565b60006020820190508181036000830152613bbe8184613b6b565b905092915050565b600067ffffffffffffffff821115613be157613be06138b2565b5b602082029050602081019050919050565b600080fd5b6000613c0a613c0584613bc6565b613912565b90508083825260208201905060208402830185811115613c2d57613c2c613bf2565b5b835b81811015613c565780613c42888261375d565b845260208401935050602081019050613c2f565b5050509392505050565b600082601f830112613c7557613c74613897565b5b8135613c85848260208601613bf7565b91505092915050565b600067ffffffffffffffff821115613ca957613ca86138b2565b5b613cb2826138a1565b9050602081019050919050565b6000613cd2613ccd84613c8e565b613912565b905082815260208101848484011115613cee57613ced61389c565b5b613cf984828561395e565b509392505050565b600082601f830112613d1657613d15613897565b5b8135613d26848260208601613cbf565b91505092915050565b600080600080600060a08688031215613d4b57613d4a6136d4565b5b6000613d5988828901613727565b9550506020613d6a88828901613727565b945050604086013567ffffffffffffffff811115613d8b57613d8a6136d9565b5b613d9788828901613c60565b935050606086013567ffffffffffffffff811115613db857613db76136d9565b5b613dc488828901613c60565b925050608086013567ffffffffffffffff811115613de557613de46136d9565b5b613df188828901613d01565b9150509295509295909350565b600067ffffffffffffffff821115613e1957613e186138b2565b5b602082029050602081019050919050565b6000613e3d613e3884613dfe565b613912565b90508083825260208201905060208402830185811115613e6057613e5f613bf2565b5b835b81811015613e895780613e758882613727565b845260208401935050602081019050613e62565b5050509392505050565b600082601f830112613ea857613ea7613897565b5b8135613eb8848260208601613e2a565b91505092915050565b60008060408385031215613ed857613ed76136d4565b5b600083013567ffffffffffffffff811115613ef657613ef56136d9565b5b613f0285828601613e93565b925050602083013567ffffffffffffffff811115613f2357613f226136d9565b5b613f2f85828601613c60565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613f6e8161373c565b82525050565b6000613f808383613f65565b60208301905092915050565b6000602082019050919050565b6000613fa482613f39565b613fae8185613f44565b9350613fb983613f55565b8060005b83811015613fea578151613fd18882613f74565b9750613fdc83613f8c565b925050600181019050613fbd565b5085935050505092915050565b600060208201905081810360008301526140118184613f99565b905092915050565b600080600060608486031215614032576140316136d4565b5b600061404086828701613727565b935050602084013567ffffffffffffffff811115614061576140606136d9565b5b61406d86828701613c60565b925050604084013567ffffffffffffffff81111561408e5761408d6136d9565b5b61409a86828701613c60565b9150509250925092565b600080604083850312156140bb576140ba6136d4565b5b60006140c98582860161375d565b92505060206140da85828601613727565b9150509250929050565b6140ed816136fe565b82525050565b6140fc816139dd565b82525050565b600061012082019050614118600083018c6140e4565b614125602083018b6137b2565b614132604083018a6137b2565b61413f60608301896137b2565b81810360808301526141518188613b6b565b905061416060a08301876137b2565b61416d60c08301866140f3565b61417a60e08301856140f3565b6141886101008301846140f3565b9a9950505050505050505050565b600080604083850312156141ad576141ac6136d4565b5b60006141bb8582860161375d565b925050602083013567ffffffffffffffff8111156141dc576141db6136d9565b5b6141e8858286016139af565b9150509250929050565b600060208201905061420760008301846140e4565b92915050565b61421681613861565b811461422157600080fd5b50565b6000813590506142338161420d565b92915050565b600080604083850312156142505761424f6136d4565b5b600061425e85828601613727565b925050602061426f85828601614224565b9150509250929050565b600080604083850312156142905761428f6136d4565b5b600061429e8582860161375d565b92505060206142af8582860161375d565b9150509250929050565b600080604083850312156142d0576142cf6136d4565b5b60006142de85828601613727565b92505060206142ef85828601613727565b9150509250929050565b600080600080600060a08688031215614315576143146136d4565b5b600061432388828901613727565b955050602061433488828901613727565b94505060406143458882890161375d565b93505060606143568882890161375d565b925050608086013567ffffffffffffffff811115614377576143766136d9565b5b61438388828901613d01565b9150509295509295909350565b6000602082840312156143a6576143a56136d4565b5b60006143b484828501613727565b91505092915050565b6000806000606084860312156143d6576143d56136d4565b5b60006143e486828701613727565b93505060206143f58682870161375d565b92505060406144068682870161375d565b9150509250925092565b7f455243313135353a2061646472657373207a65726f206973206e6f742061207660008201527f616c6964206f776e657200000000000000000000000000000000000000000000602082015250565b600061446c602a83613b27565b915061447782614410565b604082019050919050565b6000602082019050818103600083015261449b8161445f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006144dc8261373c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561450f5761450e6144a2565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061456157607f821691505b602082108114156145755761457461451a565b5b50919050565b60006145868261373c565b91506145918361373c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156145c6576145c56144a2565b5b828201905092915050565b7f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60008201527f6572206e6f7220617070726f7665640000000000000000000000000000000000602082015250565b600061462d602f83613b27565b9150614638826145d1565b604082019050919050565b6000602082019050818103600083015261465c81614620565b9050919050565b600061466e8261373c565b91506146798361373c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156146b2576146b16144a2565b5b828202905092915050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b6000614719602983613b27565b9150614724826146bd565b604082019050919050565b600060208201905081810360008301526147488161470c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006147898261373c565b91506147948361373c565b9250828210156147a7576147a66144a2565b5b828203905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061480e602683613b27565b9150614819826147b2565b604082019050919050565b6000602082019050818103600083015261483d81614801565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061487a602083613b27565b915061488582614844565b602082019050919050565b600060208201905081810360008301526148a98161486d565b9050919050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b600061490c602183613b27565b9150614917826148b0565b604082019050919050565b6000602082019050818103600083015261493b816148ff565b9050919050565b600060408201905061495760008301856137b2565b61496460208301846137b2565b9392505050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b60006149c7602883613b27565b91506149d28261496b565b604082019050919050565b600060208201905081810360008301526149f6816149ba565b9050919050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000614a59602583613b27565b9150614a64826149fd565b604082019050919050565b60006020820190508181036000830152614a8881614a4c565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b6000614aeb602a83613b27565b9150614af682614a8f565b604082019050919050565b60006020820190508181036000830152614b1a81614ade565b9050919050565b60006040820190508181036000830152614b3b8185613f99565b90508181036020830152614b4f8184613f99565b90509392505050565b7f455243313135353a206275726e2066726f6d20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000614bb4602383613b27565b9150614bbf82614b58565b604082019050919050565b60006020820190508181036000830152614be381614ba7565b9050919050565b7f455243313135353a206275726e20616d6f756e7420657863656564732062616c60008201527f616e636500000000000000000000000000000000000000000000000000000000602082015250565b6000614c46602483613b27565b9150614c5182614bea565b604082019050919050565b60006020820190508181036000830152614c7581614c39565b9050919050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b6000614cd8602983613b27565b9150614ce382614c7c565b604082019050919050565b60006020820190508181036000830152614d0781614ccb565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b6000614d44601083613b27565b9150614d4f82614d0e565b602082019050919050565b60006020820190508181036000830152614d7381614d37565b9050919050565b6000604082019050614d8f60008301856140e4565b614d9c60208301846137b2565b9392505050565b6000606082019050614db860008301866140e4565b614dc560208301856140e4565b614dd260408301846137b2565b949350505050565b600081519050919050565b600082825260208201905092915050565b6000614e0182614dda565b614e0b8185614de5565b9350614e1b818560208601613b38565b614e24816138a1565b840191505092915050565b600060a082019050614e4460008301886140e4565b614e5160208301876140e4565b614e5e60408301866137b2565b614e6b60608301856137b2565b8181036080830152614e7d8184614df6565b90509695505050505050565b600081519050614e9881613808565b92915050565b600060208284031215614eb457614eb36136d4565b5b6000614ec284828501614e89565b91505092915050565b60008160e01c9050919050565b600060033d1115614ef75760046000803e614ef4600051614ecb565b90505b90565b600060443d1015614f0a57614f8d565b614f126136ca565b60043d036004823e80513d602482011167ffffffffffffffff82111715614f3a575050614f8d565b808201805167ffffffffffffffff811115614f585750505050614f8d565b80602083010160043d038501811115614f75575050505050614f8d565b614f84826020018501866138e1565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b6000614fec603483613b27565b9150614ff782614f90565b604082019050919050565b6000602082019050818103600083015261501b81614fdf565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b600061507e602883613b27565b915061508982615022565b604082019050919050565b600060208201905081810360008301526150ad81615071565b9050919050565b600060a0820190506150c960008301886140e4565b6150d660208301876140e4565b81810360408301526150e88186613f99565b905081810360608301526150fc8185613f99565b905081810360808301526151108184614df6565b90509695505050505050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b6000615152601483613b27565b915061515d8261511c565b602082019050919050565b6000602082019050818103600083015261518181615145565b9050919050565b6000815190506151978161420d565b92915050565b6000602082840312156151b3576151b26136d4565b5b60006151c184828501615188565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000615226602a83613b27565b9150615231826151ca565b604082019050919050565b6000602082019050818103600083015261525581615219565b9050919050565b7f455243313135355061757361626c653a20746f6b656e207472616e736665722060008201527f7768696c65207061757365640000000000000000000000000000000000000000602082015250565b60006152b8602c83613b27565b91506152c38261525c565b604082019050919050565b600060208201905081810360008301526152e7816152ab565b9050919050565b7f455243313135353a206275726e20616d6f756e74206578636565647320746f7460008201527f616c537570706c79000000000000000000000000000000000000000000000000602082015250565b600061534a602883613b27565b9150615355826152ee565b604082019050919050565b600060208201905081810360008301526153798161533d565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006153dc602683613b27565b91506153e782615380565b604082019050919050565b6000602082019050818103600083015261540b816153cf565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000615448601d83613b27565b915061545382615412565b602082019050919050565b600060208201905081810360008301526154778161543b565b9050919050565b600081905092915050565b600061549482614dda565b61549e818561547e565b93506154ae818560208601613b38565b80840191505092915050565b60006154c68284615489565b91508190509291505056fea2646970667358221220a9c1d516e308f57c73412607e37d4db42ef908aa4cc8c8d3fa5870533f39094964736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101ef5760003560e01c80637acc0b201161010f578063bcb8e5a5116100a2578063f242432a11610071578063f242432a14610608578063f2fde38b14610624578063f5298aca14610640578063fea1e1c21461065c576101ef565b8063bcb8e5a51461055c578063bd85b0391461058c578063d8aed145146105bc578063e985e9c5146105d8576101ef565b80638e1eb411116100de5780638e1eb411146104d6578063a22cb46514610506578063aad3ec9614610522578063ac964f211461053e576101ef565b80637acc0b201461045a5780638456cb5914610492578063862440e21461049c5780638da5cb5b146104b8576101ef565b80634e1273f411610187578063715018a611610156578063715018a6146103c057806371cf7693146103ca57806375a397a1146103fa578063774bc5be1461042a576101ef565b80634e1273f4146103265780634f558e79146103565780635c975abb146103865780636b20c454146103a4576101ef565b806320e53acb116101c357806320e53acb146102a05780632eb2c2d6146102d05780633f4ba83a146102ec578063486501c5146102f6576101ef565b8062fdd58e146101f457806301ffc9a71461022457806304cefd83146102545780630e89341c14610270575b600080fd5b61020e60048036038101906102099190613772565b61068c565b60405161021b91906137c1565b60405180910390f35b61023e60048036038101906102399190613834565b610755565b60405161024b919061387c565b60405180910390f35b61026e60048036038101906102699190613a1d565b610837565b005b61028a60048036038101906102859190613aef565b610a33565b6040516102979190613ba4565b60405180910390f35b6102ba60048036038101906102b59190613772565b610adb565b6040516102c791906137c1565b60405180910390f35b6102ea60048036038101906102e59190613d2f565b610b4a565b005b6102f4610beb565b005b610310600480360381019061030b9190613aef565b610bfd565b60405161031d91906137c1565b60405180910390f35b610340600480360381019061033b9190613ec1565b610c22565b60405161034d9190613ff7565b60405180910390f35b610370600480360381019061036b9190613aef565b610d3b565b60405161037d919061387c565b60405180910390f35b61038e610d4f565b60405161039b919061387c565b60405180910390f35b6103be60048036038101906103b99190614019565b610d66565b005b6103c8610e03565b005b6103e460048036038101906103df9190613aef565b610e17565b6040516103f191906137c1565b60405180910390f35b610414600480360381019061040f91906140a4565b610e4f565b60405161042191906137c1565b60405180910390f35b610444600480360381019061043f9190613aef565b610e74565b60405161045191906137c1565b60405180910390f35b610474600480360381019061046f9190613aef565b610f1e565b60405161048999989796959493929190614102565b60405180910390f35b61049a611050565b005b6104b660048036038101906104b19190614196565b611062565b005b6104c0611099565b6040516104cd91906141f2565b60405180910390f35b6104f060048036038101906104eb9190613aef565b6110c3565b6040516104fd919061387c565b60405180910390f35b610520600480360381019061051b9190614239565b611104565b005b61053c60048036038101906105379190613772565b61111a565b005b6105466112de565b60405161055391906137c1565b60405180910390f35b61057660048036038101906105719190613772565b6112e4565b60405161058391906137c1565b60405180910390f35b6105a660048036038101906105a19190613aef565b61134d565b6040516105b391906137c1565b60405180910390f35b6105d660048036038101906105d19190614279565b61136a565b005b6105f260048036038101906105ed91906142b9565b6114c3565b6040516105ff919061387c565b60405180910390f35b610622600480360381019061061d91906142f9565b611557565b005b61063e60048036038101906106399190614390565b6115f8565b005b61065a600480360381019061065591906143bd565b61167c565b005b610676600480360381019061067191906140a4565b611719565b60405161068391906137c1565b60405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156106fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f490614482565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061082057507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610830575061082f8261173e565b5b9050919050565b61083f6117a8565b60006040518061012001604052808973ffffffffffffffffffffffffffffffffffffffff168152602001888152602001878152602001868152602001858152602001600081526020018467ffffffffffffffff1681526020018367ffffffffffffffff168152602001600067ffffffffffffffff1681525090508060056000600654815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004019080519060200190610950929190613627565b5060a0820151816005015560c08201518160060160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060e08201518160060160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506101008201518160060160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550905050610a106109f7611099565b6006548b60405180602001604052806000815250611826565b60066000815480929190610a23906144d1565b9190505550505050505050505050565b6060600560008381526020019081526020016000206004018054610a5690614549565b80601f0160208091040260200160405190810160405280929190818152602001828054610a8290614549565b8015610acf5780601f10610aa457610100808354040283529160200191610acf565b820191906000526020600020905b815481529060010190602001808311610ab257829003601f168201915b50505050509050919050565b6000610ae783836119d7565b6008600084815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610b42919061457b565b905092915050565b610b52611b0b565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610b985750610b9785610b92611b0b565b6114c3565b5b610bd7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bce90614643565b60405180910390fd5b610be48585858585611b13565b5050505050565b610bf36117a8565b610bfb611e35565b565b6000610c0882610e74565b610c118361134d565b610c1b9190614663565b9050919050565b60608151835114610c68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5f9061472f565b60405180910390fd5b6000835167ffffffffffffffff811115610c8557610c846138b2565b5b604051908082528060200260200182016040528015610cb35781602001602082028036833780820191505090505b50905060005b8451811015610d3057610d00858281518110610cd857610cd761474f565b5b6020026020010151858381518110610cf357610cf261474f565b5b602002602001015161068c565b828281518110610d1357610d1261474f565b5b60200260200101818152505080610d29906144d1565b9050610cb9565b508091505092915050565b600080610d478361134d565b119050919050565b6000600460009054906101000a900460ff16905090565b610d6e611b0b565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480610db45750610db383610dae611b0b565b6114c3565b5b610df3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dea90614643565b60405180910390fd5b610dfe838383611e98565b505050565b610e0b6117a8565b610e156000612167565b565b6000806005600084815260200190815260200160002090508060050154610e3d84610bfd565b610e47919061477e565b915050919050565b6007602052816000526040600020602052806000526040600020600091509150505481565b600080600560008481526020019081526020016000209050610f07816002015482600301548360060160009054906101000a900467ffffffffffffffff1667ffffffffffffffff168460060160089054906101000a900467ffffffffffffffff1667ffffffffffffffff168560060160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1661222d565b8160010154610f16919061457b565b915050919050565b60056020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001015490806002015490806003015490806004018054610f7990614549565b80601f0160208091040260200160405190810160405280929190818152602001828054610fa590614549565b8015610ff25780601f10610fc757610100808354040283529160200191610ff2565b820191906000526020600020905b815481529060010190602001808311610fd557829003601f168201915b5050505050908060050154908060060160009054906101000a900467ffffffffffffffff16908060060160089054906101000a900467ffffffffffffffff16908060060160109054906101000a900467ffffffffffffffff16905089565b6110586117a8565b6110606122c4565b565b61106a6117a8565b80600560008481526020019081526020016000206004019080519060200190611094929190613627565b505050565b6000600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000806005600084815260200190815260200160002060060160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1614159050919050565b61111661110f611b0b565b8383612327565b5050565b611122612494565b6000600560008381526020019081526020016000209050600061114584846124de565b61114e836110c3565b156111df57600061115f858561068c565b90506008600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548184600101546111c29190614663565b6111cc919061457b565b91506111d98585836125d7565b50611233565b6008600084815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b60006008600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506112d884828460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661281e9092919063ffffffff16565b50505050565b60065481565b60006112ef826110c3565b1561133a576112fe8383610adb565b600560008481526020019081526020016000206001015461131f858561068c565b6113299190614663565b611333919061457b565b9050611347565b6113448383610adb565b90505b92915050565b600060036000838152602001908152602001600020549050919050565b6000600560008481526020019081526020016000209050600082905061138f846110c3565b156113d157836040517f266b64850000000000000000000000000000000000000000000000000000000081526004016113c891906137c1565b60405180910390fd5b60006113dc85610e17565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84141561140a578091505b8183600501600082825461141e919061457b565b92505081905550826005015461143386610bfd565b1161146457428360060160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b6114bc61146f611b0b565b30848660000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166128a4909392919063ffffffff16565b5050505050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61155f611b0b565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614806115a557506115a48561159f611b0b565b6114c3565b5b6115e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115db90614643565b60405180910390fd5b6115f1858585858561292d565b5050505050565b6116006117a8565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611670576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166790614824565b60405180910390fd5b61167981612167565b50565b611684611b0b565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614806116ca57506116c9836116c4611b0b565b6114c3565b5b611709576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161170090614643565b60405180910390fd5b6117148383836125d7565b505050565b6008602052816000526040600020602052806000526040600020600091509150505481565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6117b0611b0b565b73ffffffffffffffffffffffffffffffffffffffff166117ce611099565b73ffffffffffffffffffffffffffffffffffffffff1614611824576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161181b90614890565b60405180910390fd5b565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611896576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188d90614922565b60405180910390fd5b60006118a0611b0b565b905060006118ad85612bc9565b905060006118ba85612bc9565b90506118cb83600089858589612c43565b8460008088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461192a919061457b565b925050819055508673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6289896040516119a8929190614942565b60405180910390a46119bf83600089858589612d53565b6119ce83600089898989612d5b565b50505050505050565b60008060056000848152602001908152602001600020905060006007600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508160060160009054906101000a900467ffffffffffffffff1667ffffffffffffffff16811015611a94578160060160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1690505b611aed82600201548360030154838560060160089054906101000a900467ffffffffffffffff1667ffffffffffffffff168660060160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1661222d565b611af7868661068c565b611b019190614663565b9250505092915050565b600033905090565b8151835114611b57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4e906149dd565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611bc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bbe90614a6f565b60405180910390fd5b6000611bd1611b0b565b9050611be1818787878787612c43565b60005b8451811015611d92576000858281518110611c0257611c0161474f565b5b602002602001015190506000858381518110611c2157611c2061474f565b5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611cc2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cb990614b01565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611d77919061457b565b9250508190555050505080611d8b906144d1565b9050611be4565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611e09929190614b21565b60405180910390a4611e1f818787878787612d53565b611e2d818787878787612f42565b505050505050565b611e3d613129565b6000600460006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611e81611b0b565b604051611e8e91906141f2565b60405180910390a1565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611f08576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eff90614bca565b60405180910390fd5b8051825114611f4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f43906149dd565b60405180910390fd5b6000611f56611b0b565b9050611f7681856000868660405180602001604052806000815250612c43565b60005b83518110156120c3576000848281518110611f9757611f9661474f565b5b602002602001015190506000848381518110611fb657611fb561474f565b5b60200260200101519050600080600084815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015612057576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161204e90614c5c565b60405180910390fd5b81810360008085815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050505080806120bb906144d1565b915050611f79565b50600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb868660405161213b929190614b21565b60405180910390a461216181856000868660405180602001604052806000815250612d53565b50505050565b6000600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600460016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000806000831461223e5782612240565b425b90508481116122535760009150506122bb565b60008582612261919061477e565b9050600081896122719190614663565b9050828610156122b457600087871161228a578761228c565b865b9050808461229a919061477e565b896122a59190614663565b826122b0919061457b565b9150505b8093505050505b95945050505050565b6122cc612494565b6001600460006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612310611b0b565b60405161231d91906141f2565b60405180910390a1565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612396576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161238d90614cee565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051612487919061387c565b60405180910390a3505050565b61249c610d4f565b156124dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124d390614d5a565b60405180910390fd5b565b6005600082815260200190815260200160002060060160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1642101561251f576125d3565b6125298282610adb565b6008600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550426007600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612647576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161263e90614bca565b60405180910390fd5b6000612651611b0b565b9050600061265e84612bc9565b9050600061266b84612bc9565b905061268b83876000858560405180602001604052806000815250612c43565b600080600087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905084811015612722576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161271990614c5c565b60405180910390fd5b84810360008088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6289896040516127ef929190614942565b60405180910390a461281584886000868660405180602001604052806000815250612d53565b50505050505050565b61289f8363a9059cbb60e01b848460405160240161283d929190614d7a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613172565b505050565b612927846323b872dd60e01b8585856040516024016128c593929190614da3565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613172565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561299d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161299490614a6f565b60405180910390fd5b60006129a7611b0b565b905060006129b485612bc9565b905060006129c185612bc9565b90506129d1838989858589612c43565b600080600088815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905085811015612a68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a5f90614b01565b60405180910390fd5b85810360008089815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508560008089815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612b1d919061457b565b925050819055508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628a8a604051612b9a929190614942565b60405180910390a4612bb0848a8a86868a612d53565b612bbe848a8a8a8a8a612d5b565b505050505050505050565b60606000600167ffffffffffffffff811115612be857612be76138b2565b5b604051908082528060200260200182016040528015612c165781602001602082028036833780820191505090505b5090508281600081518110612c2e57612c2d61474f565b5b60200260200101818152505080915050919050565b612c51868686868686613239565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614612cce5760005b8351811015612ccc576000848281518110612ca657612ca561474f565b5b60200260200101519050612cba87826124de565b5080612cc5906144d1565b9050612c88565b505b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614612d4b5760005b8351811015612d49576000848281518110612d2357612d2261474f565b5b60200260200101519050612d3786826124de565b5080612d42906144d1565b9050612d05565b505b505050505050565b505050505050565b612d7a8473ffffffffffffffffffffffffffffffffffffffff16613297565b15612f3a578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401612dc0959493929190614e2f565b602060405180830381600087803b158015612dda57600080fd5b505af1925050508015612e0b57506040513d601f19601f82011682018060405250810190612e089190614e9e565b60015b612eb157612e17614ed8565b806308c379a01415612e745750612e2c614efa565b80612e375750612e76565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e6b9190613ba4565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ea890615002565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612f38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f2f90615094565b60405180910390fd5b505b505050505050565b612f618473ffffffffffffffffffffffffffffffffffffffff16613297565b15613121578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401612fa79594939291906150b4565b602060405180830381600087803b158015612fc157600080fd5b505af1925050508015612ff257506040513d601f19601f82011682018060405250810190612fef9190614e9e565b60015b61309857612ffe614ed8565b806308c379a0141561305b5750613013614efa565b8061301e575061305d565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130529190613ba4565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161308f90615002565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461311f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161311690615094565b60405180910390fd5b505b505050505050565b613131610d4f565b613170576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161316790615168565b60405180910390fd5b565b60006131d4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166132ba9092919063ffffffff16565b905060008151111561323457808060200190518101906131f4919061519d565b613233576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161322a9061523c565b60405180910390fd5b5b505050565b6132478686868686866132d2565b61324f610d4f565b1561328f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613286906152ce565b60405180910390fd5b505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60606132c984846000856134a4565b90509392505050565b6132e08686868686866135b8565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614156133925760005b8351811015613390578281815181106133345761333361474f565b5b6020026020010151600360008684815181106133535761335261474f565b5b602002602001015181526020019081526020016000206000828254613378919061457b565b9250508190555080613389906144d1565b9050613318565b505b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561349c5760005b835181101561349a5760008482815181106133e8576133e761474f565b5b6020026020010151905060008483815181106134075761340661474f565b5b602002602001015190506000600360008481526020019081526020016000205490508181101561346c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161346390615360565b60405180910390fd5b818103600360008581526020019081526020016000208190555050505080613493906144d1565b90506133ca565b505b505050505050565b6060824710156134e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134e0906153f2565b60405180910390fd5b6134f285613297565b613531576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135289061545e565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161355a91906154ba565b60006040518083038185875af1925050503d8060008114613597576040519150601f19603f3d011682016040523d82523d6000602084013e61359c565b606091505b50915091506135ac8282866135c0565b92505050949350505050565b505050505050565b606083156135d057829050613620565b6000835111156135e35782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016136179190613ba4565b60405180910390fd5b9392505050565b82805461363390614549565b90600052602060002090601f016020900481019282613655576000855561369c565b82601f1061366e57805160ff191683800117855561369c565b8280016001018555821561369c579182015b8281111561369b578251825591602001919060010190613680565b5b5090506136a991906136ad565b5090565b5b808211156136c65760008160009055506001016136ae565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613709826136de565b9050919050565b613719816136fe565b811461372457600080fd5b50565b60008135905061373681613710565b92915050565b6000819050919050565b61374f8161373c565b811461375a57600080fd5b50565b60008135905061376c81613746565b92915050565b60008060408385031215613789576137886136d4565b5b600061379785828601613727565b92505060206137a88582860161375d565b9150509250929050565b6137bb8161373c565b82525050565b60006020820190506137d660008301846137b2565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b613811816137dc565b811461381c57600080fd5b50565b60008135905061382e81613808565b92915050565b60006020828403121561384a576138496136d4565b5b60006138588482850161381f565b91505092915050565b60008115159050919050565b61387681613861565b82525050565b6000602082019050613891600083018461386d565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6138ea826138a1565b810181811067ffffffffffffffff82111715613909576139086138b2565b5b80604052505050565b600061391c6136ca565b905061392882826138e1565b919050565b600067ffffffffffffffff821115613948576139476138b2565b5b613951826138a1565b9050602081019050919050565b82818337600083830152505050565b600061398061397b8461392d565b613912565b90508281526020810184848401111561399c5761399b61389c565b5b6139a784828561395e565b509392505050565b600082601f8301126139c4576139c3613897565b5b81356139d484826020860161396d565b91505092915050565b600067ffffffffffffffff82169050919050565b6139fa816139dd565b8114613a0557600080fd5b50565b600081359050613a17816139f1565b92915050565b600080600080600080600080610100898b031215613a3e57613a3d6136d4565b5b6000613a4c8b828c0161375d565b9850506020613a5d8b828c01613727565b9750506040613a6e8b828c0161375d565b9650506060613a7f8b828c0161375d565b9550506080613a908b828c0161375d565b94505060a089013567ffffffffffffffff811115613ab157613ab06136d9565b5b613abd8b828c016139af565b93505060c0613ace8b828c01613a08565b92505060e0613adf8b828c01613a08565b9150509295985092959890939650565b600060208284031215613b0557613b046136d4565b5b6000613b138482850161375d565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613b56578082015181840152602081019050613b3b565b83811115613b65576000848401525b50505050565b6000613b7682613b1c565b613b808185613b27565b9350613b90818560208601613b38565b613b99816138a1565b840191505092915050565b60006020820190508181036000830152613bbe8184613b6b565b905092915050565b600067ffffffffffffffff821115613be157613be06138b2565b5b602082029050602081019050919050565b600080fd5b6000613c0a613c0584613bc6565b613912565b90508083825260208201905060208402830185811115613c2d57613c2c613bf2565b5b835b81811015613c565780613c42888261375d565b845260208401935050602081019050613c2f565b5050509392505050565b600082601f830112613c7557613c74613897565b5b8135613c85848260208601613bf7565b91505092915050565b600067ffffffffffffffff821115613ca957613ca86138b2565b5b613cb2826138a1565b9050602081019050919050565b6000613cd2613ccd84613c8e565b613912565b905082815260208101848484011115613cee57613ced61389c565b5b613cf984828561395e565b509392505050565b600082601f830112613d1657613d15613897565b5b8135613d26848260208601613cbf565b91505092915050565b600080600080600060a08688031215613d4b57613d4a6136d4565b5b6000613d5988828901613727565b9550506020613d6a88828901613727565b945050604086013567ffffffffffffffff811115613d8b57613d8a6136d9565b5b613d9788828901613c60565b935050606086013567ffffffffffffffff811115613db857613db76136d9565b5b613dc488828901613c60565b925050608086013567ffffffffffffffff811115613de557613de46136d9565b5b613df188828901613d01565b9150509295509295909350565b600067ffffffffffffffff821115613e1957613e186138b2565b5b602082029050602081019050919050565b6000613e3d613e3884613dfe565b613912565b90508083825260208201905060208402830185811115613e6057613e5f613bf2565b5b835b81811015613e895780613e758882613727565b845260208401935050602081019050613e62565b5050509392505050565b600082601f830112613ea857613ea7613897565b5b8135613eb8848260208601613e2a565b91505092915050565b60008060408385031215613ed857613ed76136d4565b5b600083013567ffffffffffffffff811115613ef657613ef56136d9565b5b613f0285828601613e93565b925050602083013567ffffffffffffffff811115613f2357613f226136d9565b5b613f2f85828601613c60565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613f6e8161373c565b82525050565b6000613f808383613f65565b60208301905092915050565b6000602082019050919050565b6000613fa482613f39565b613fae8185613f44565b9350613fb983613f55565b8060005b83811015613fea578151613fd18882613f74565b9750613fdc83613f8c565b925050600181019050613fbd565b5085935050505092915050565b600060208201905081810360008301526140118184613f99565b905092915050565b600080600060608486031215614032576140316136d4565b5b600061404086828701613727565b935050602084013567ffffffffffffffff811115614061576140606136d9565b5b61406d86828701613c60565b925050604084013567ffffffffffffffff81111561408e5761408d6136d9565b5b61409a86828701613c60565b9150509250925092565b600080604083850312156140bb576140ba6136d4565b5b60006140c98582860161375d565b92505060206140da85828601613727565b9150509250929050565b6140ed816136fe565b82525050565b6140fc816139dd565b82525050565b600061012082019050614118600083018c6140e4565b614125602083018b6137b2565b614132604083018a6137b2565b61413f60608301896137b2565b81810360808301526141518188613b6b565b905061416060a08301876137b2565b61416d60c08301866140f3565b61417a60e08301856140f3565b6141886101008301846140f3565b9a9950505050505050505050565b600080604083850312156141ad576141ac6136d4565b5b60006141bb8582860161375d565b925050602083013567ffffffffffffffff8111156141dc576141db6136d9565b5b6141e8858286016139af565b9150509250929050565b600060208201905061420760008301846140e4565b92915050565b61421681613861565b811461422157600080fd5b50565b6000813590506142338161420d565b92915050565b600080604083850312156142505761424f6136d4565b5b600061425e85828601613727565b925050602061426f85828601614224565b9150509250929050565b600080604083850312156142905761428f6136d4565b5b600061429e8582860161375d565b92505060206142af8582860161375d565b9150509250929050565b600080604083850312156142d0576142cf6136d4565b5b60006142de85828601613727565b92505060206142ef85828601613727565b9150509250929050565b600080600080600060a08688031215614315576143146136d4565b5b600061432388828901613727565b955050602061433488828901613727565b94505060406143458882890161375d565b93505060606143568882890161375d565b925050608086013567ffffffffffffffff811115614377576143766136d9565b5b61438388828901613d01565b9150509295509295909350565b6000602082840312156143a6576143a56136d4565b5b60006143b484828501613727565b91505092915050565b6000806000606084860312156143d6576143d56136d4565b5b60006143e486828701613727565b93505060206143f58682870161375d565b92505060406144068682870161375d565b9150509250925092565b7f455243313135353a2061646472657373207a65726f206973206e6f742061207660008201527f616c6964206f776e657200000000000000000000000000000000000000000000602082015250565b600061446c602a83613b27565b915061447782614410565b604082019050919050565b6000602082019050818103600083015261449b8161445f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006144dc8261373c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561450f5761450e6144a2565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061456157607f821691505b602082108114156145755761457461451a565b5b50919050565b60006145868261373c565b91506145918361373c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156145c6576145c56144a2565b5b828201905092915050565b7f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60008201527f6572206e6f7220617070726f7665640000000000000000000000000000000000602082015250565b600061462d602f83613b27565b9150614638826145d1565b604082019050919050565b6000602082019050818103600083015261465c81614620565b9050919050565b600061466e8261373c565b91506146798361373c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156146b2576146b16144a2565b5b828202905092915050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b6000614719602983613b27565b9150614724826146bd565b604082019050919050565b600060208201905081810360008301526147488161470c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006147898261373c565b91506147948361373c565b9250828210156147a7576147a66144a2565b5b828203905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061480e602683613b27565b9150614819826147b2565b604082019050919050565b6000602082019050818103600083015261483d81614801565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061487a602083613b27565b915061488582614844565b602082019050919050565b600060208201905081810360008301526148a98161486d565b9050919050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b600061490c602183613b27565b9150614917826148b0565b604082019050919050565b6000602082019050818103600083015261493b816148ff565b9050919050565b600060408201905061495760008301856137b2565b61496460208301846137b2565b9392505050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b60006149c7602883613b27565b91506149d28261496b565b604082019050919050565b600060208201905081810360008301526149f6816149ba565b9050919050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000614a59602583613b27565b9150614a64826149fd565b604082019050919050565b60006020820190508181036000830152614a8881614a4c565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b6000614aeb602a83613b27565b9150614af682614a8f565b604082019050919050565b60006020820190508181036000830152614b1a81614ade565b9050919050565b60006040820190508181036000830152614b3b8185613f99565b90508181036020830152614b4f8184613f99565b90509392505050565b7f455243313135353a206275726e2066726f6d20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000614bb4602383613b27565b9150614bbf82614b58565b604082019050919050565b60006020820190508181036000830152614be381614ba7565b9050919050565b7f455243313135353a206275726e20616d6f756e7420657863656564732062616c60008201527f616e636500000000000000000000000000000000000000000000000000000000602082015250565b6000614c46602483613b27565b9150614c5182614bea565b604082019050919050565b60006020820190508181036000830152614c7581614c39565b9050919050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b6000614cd8602983613b27565b9150614ce382614c7c565b604082019050919050565b60006020820190508181036000830152614d0781614ccb565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b6000614d44601083613b27565b9150614d4f82614d0e565b602082019050919050565b60006020820190508181036000830152614d7381614d37565b9050919050565b6000604082019050614d8f60008301856140e4565b614d9c60208301846137b2565b9392505050565b6000606082019050614db860008301866140e4565b614dc560208301856140e4565b614dd260408301846137b2565b949350505050565b600081519050919050565b600082825260208201905092915050565b6000614e0182614dda565b614e0b8185614de5565b9350614e1b818560208601613b38565b614e24816138a1565b840191505092915050565b600060a082019050614e4460008301886140e4565b614e5160208301876140e4565b614e5e60408301866137b2565b614e6b60608301856137b2565b8181036080830152614e7d8184614df6565b90509695505050505050565b600081519050614e9881613808565b92915050565b600060208284031215614eb457614eb36136d4565b5b6000614ec284828501614e89565b91505092915050565b60008160e01c9050919050565b600060033d1115614ef75760046000803e614ef4600051614ecb565b90505b90565b600060443d1015614f0a57614f8d565b614f126136ca565b60043d036004823e80513d602482011167ffffffffffffffff82111715614f3a575050614f8d565b808201805167ffffffffffffffff811115614f585750505050614f8d565b80602083010160043d038501811115614f75575050505050614f8d565b614f84826020018501866138e1565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b6000614fec603483613b27565b9150614ff782614f90565b604082019050919050565b6000602082019050818103600083015261501b81614fdf565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b600061507e602883613b27565b915061508982615022565b604082019050919050565b600060208201905081810360008301526150ad81615071565b9050919050565b600060a0820190506150c960008301886140e4565b6150d660208301876140e4565b81810360408301526150e88186613f99565b905081810360608301526150fc8185613f99565b905081810360808301526151108184614df6565b90509695505050505050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b6000615152601483613b27565b915061515d8261511c565b602082019050919050565b6000602082019050818103600083015261518181615145565b9050919050565b6000815190506151978161420d565b92915050565b6000602082840312156151b3576151b26136d4565b5b60006151c184828501615188565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000615226602a83613b27565b9150615231826151ca565b604082019050919050565b6000602082019050818103600083015261525581615219565b9050919050565b7f455243313135355061757361626c653a20746f6b656e207472616e736665722060008201527f7768696c65207061757365640000000000000000000000000000000000000000602082015250565b60006152b8602c83613b27565b91506152c38261525c565b604082019050919050565b600060208201905081810360008301526152e7816152ab565b9050919050565b7f455243313135353a206275726e20616d6f756e74206578636565647320746f7460008201527f616c537570706c79000000000000000000000000000000000000000000000000602082015250565b600061534a602883613b27565b9150615355826152ee565b604082019050919050565b600060208201905081810360008301526153798161533d565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006153dc602683613b27565b91506153e782615380565b604082019050919050565b6000602082019050818103600083015261540b816153cf565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000615448601d83613b27565b915061545382615412565b602082019050919050565b600060208201905081810360008301526154778161543b565b9050919050565b600081905092915050565b600061549482614dda565b61549e818561547e565b93506154ae818560208601613b38565b80840191505092915050565b60006154c68284615489565b91508190509291505056fea2646970667358221220a9c1d516e308f57c73412607e37d4db42ef908aa4cc8c8d3fa5870533f39094964736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "exists(uint256)": {
        "details": "Indicates whether any token exist with a given id, or not."
      },
      "getTotalDebt(uint256)": {
        "details": "ERC-1155 totalSupply has no decimal. Therefore, just multiply totalSupply * debt per token"
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "repay(uint256,uint256)": {
        "details": "It is not able to repay after fully repaying the loan. The caller need to approve the repaying token. There are 3 cases. 1. block.timestamp < startTimestamp: repay only the principal. 2. startTs <= block.timestamp <= endTs: repay principal + interest 3. endTs < block.timestamp: repay principal + interest + overdue interest",
        "params": {
          "_amount": "amount of token to repay. type(uint256).max means to repay all.",
          "_id": "token id"
        }
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "totalSupply(uint256)": {
        "details": "Total amount of tokens in with a given id."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claim(address,uint256)": {
        "notice": "Nft holders claim their interest. Users with zero balance are also able to claim because they might have once had it, but transferred."
      },
      "getUnclaimedInterest(address,uint256)": {
        "notice": "Calculate unclaimed interest"
      },
      "getUnitDebt(uint256)": {
        "notice": "Calculate the debt value if it has never been claimed. It does not increase after repaid."
      },
      "getUnpaidDebt(uint256)": {
        "notice": "Calculate the debt value to be fully repaid."
      },
      "isRepaid(uint256)": {
        "notice": "Show whether the loan is repaid."
      },
      "previewClaim(address,uint256)": {
        "notice": "Calculate how many tokens to receive on claim."
      }
    },
    "notice": "This repays the interest monthly. At the maturity date, lenders receive the principal and one-month interest.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 246,
        "contract": "contracts/CouponBond.sol:CouponBond",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 252,
        "contract": "contracts/CouponBond.sol:CouponBond",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 254,
        "contract": "contracts/CouponBond.sol:CouponBond",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 1733,
        "contract": "contracts/CouponBond.sol:CouponBond",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 130,
        "contract": "contracts/CouponBond.sol:CouponBond",
        "label": "_paused",
        "offset": 0,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 7,
        "contract": "contracts/CouponBond.sol:CouponBond",
        "label": "_owner",
        "offset": 1,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2696,
        "contract": "contracts/CouponBond.sol:CouponBond",
        "label": "products",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(Product)3423_storage)"
      },
      {
        "astId": 2698,
        "contract": "contracts/CouponBond.sol:CouponBond",
        "label": "numProducts",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2704,
        "contract": "contracts/CouponBond.sol:CouponBond",
        "label": "lastUpdatedTs",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2710,
        "contract": "contracts/CouponBond.sol:CouponBond",
        "label": "unclaimedInterest",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Product)3423_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ICouponBond.Product)",
        "numberOfBytes": "32",
        "value": "t_struct(Product)3423_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Product)3423_storage": {
        "encoding": "inplace",
        "label": "struct ICouponBond.Product",
        "members": [
          {
            "astId": 3406,
            "contract": "contracts/CouponBond.sol:CouponBond",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3408,
            "contract": "contracts/CouponBond.sol:CouponBond",
            "label": "value",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3410,
            "contract": "contracts/CouponBond.sol:CouponBond",
            "label": "interestPerSecond",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3412,
            "contract": "contracts/CouponBond.sol:CouponBond",
            "label": "overdueInterestPerSecond",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3414,
            "contract": "contracts/CouponBond.sol:CouponBond",
            "label": "uri",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 3416,
            "contract": "contracts/CouponBond.sol:CouponBond",
            "label": "totalRepaid",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 3418,
            "contract": "contracts/CouponBond.sol:CouponBond",
            "label": "startTs",
            "offset": 0,
            "slot": "6",
            "type": "t_uint64"
          },
          {
            "astId": 3420,
            "contract": "contracts/CouponBond.sol:CouponBond",
            "label": "endTs",
            "offset": 8,
            "slot": "6",
            "type": "t_uint64"
          },
          {
            "astId": 3422,
            "contract": "contracts/CouponBond.sol:CouponBond",
            "label": "repaidTs",
            "offset": 16,
            "slot": "6",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}